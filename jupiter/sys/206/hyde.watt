::
::  System tiles
::
=>  |%  ++  slim  @uwH
        ++  phat  @uwI
        ++  home  @uwH
        ++  bill  ?(rock [rock rock])
        ++  king  @ud
        ++  rock  @uw
        ++  step  @ud
        ++  tick  @ud
        ++  time  @mc
    --
::
::  Protocol tiles
::
=>  |%  
    ++  fact  >[p=barn q=note]
    ++  brut                                            ::  protocol src
      $%  [%bu p=(list brut)]                           ::  bundle
          [%da p=barn q=note]                           ::  end data
          [%pc p=home q=nail]                           ::  certificate
          [%pg p=home q=brut]                           ::  signed by
          [%pl p=home q=brut]                           ::  sealed to
          [%ps p=home q=harp]                           ::  credentials
          [%sm p=home q=home r=brut]                    ::  from to what
          [%sp p=home q=home r=rock]                    ::  register key
      ==
    ++  harp  $|(~ $%([& p=ring] [| p=wand]))           ::  RSA data
    ++  nail  >[p=slim q=(list home)]                   ::  regime core
    ++  opal                                            ::  signed/sealed data
      $:  who=home                                      ::  identity
          ver=king                                      ::  regime version 
          dat=?(@ [@ @])                                ::  direct/indirect
      ==
    ++  pipe                                            ::  one-way channel
      $:  src=home                                      ::  sender
          ver=king                                      ::  sender version
          dst=home                                      ::  receiver
          end=time                                      ::  not valid after
          key=phat                                      ::  symmetric key
      ==
    --
::
::  Internal tiles
::
=>  |%
    ++  card                                          ::  kernel query
      $%  :-  %reg 
          :+  p=home
            q=king
          r=?(%gem %pub %pri %wil)
      ==
    ++  case                                          ::  per home
      $:  gem=slim                                    ::  fingerprint
          pub=(unit ring)                             ::  public key
          sol=(unit soul)                             ::  private state
          ver=king                                    ::  regime version
          wil=(list home)                             ::  update control
      ==
    ++  soul                                          ::  private state
      $:  wad=wand                                    ::  private key
      ==
    --
::
::  Boot interface
::
|=  $:  pas=tape                                      ::  passphrase
        now=time                                      ::  atomic not sidereal
        pyl=(list rock)                               ::  packet log
    ==
::
::  
::
=+  :*  cod=*(map slim pipe)                          ::  universal codebook
        box=(map barn note)                           ::  foreign facts
        reg=*(map home case)                          ::  regime state
    ==
::
::  Brain
::
|%
++  blow                                              ::  apply deed list
  |=  doy=(list gift)  ^+  mind
  ?~  doy
    ..mind
  ?.  -.i.doy
    $(doy t.doy) 
  $(..mind (i.doy mind), doy t.doy)
:: 
++  burp
  =+  who=(set home)
  |=  peb=rock  ^-  (list gift)
  =+  [mag=(end 3 2 peb) bod=(rsh 3 2 peb)]
  ~|  [%burp mag]
  ?+    mag  !!
  ::
      %bu
    =+  may=((hard (list rock)) (cue bod))
    |-  ^-  work
    ?~(may ~ (weld $$(peb i.may) $(may t.may)))
  ::
      %da
    =+  fay=((hard fact) (cue bod)) 
    =+  con=?>(?=(^ p.fay) (need (slay i.p.fay)))
    ?>  ?&  ?=([%% %h con])
            (~(has in who) q.p.con) 
            !(~(has in box) p.fay)
        ==
    :~  :-  %& 
        |+  dum=_mind  =>  .(..mind dum)
        ..mind(box (~(put in box) p.fay q.fay))
    ==
  ::
      %pc
    =+  luy=((hard >[p=home q=king r=nail]) (cue bod))
    :~  :-  %|
        %+  wait
          [%reg p.luy (dec q.luy) %wil]
        |+  vig=(list home)
        |-  ^-  work
        ?~  vig
          :~  :-  %&
              |+  dum=_mind  =>  .(..mind dum)
              %=    ..mind
                  reg
                %+  ~(put in reg)
                  p.luy
                [p.r.luy ~ ~ q.luy q.r.luy]
              ==
          ==
        ?>(&((~(has in who) i.vig) $(vig t.vig)))
    ==
  ::
      %ps
    =+  hay=((hard >[
  ==
::
++  deed  |+(dum=_mind mind)
++  gift  $%([& p=_deed] [| p=_task])
++  know
  |*  ned=card
  ~|  [%know ned]
  ?+    ned  !!
      [%reg *]
    =+  cas=(~(get by reg) p.ned)
    ?.  =(ver.cas q.ned)
      ?>((lth ver.cas q.ned) ~)
    ?+  r.ned  !!
      %gem  [~ u=gem.cas]
      %pub  pub.cas
      %pri  ?~(sol.cas ~ [~ u=wad.sol.cas])
      %wil   [~ u=wil.cas]
    ==
  ==
::
++  mind  .                                           ::  live brain
++  walk                                              ::  apply task list
  |=  doy=(list gift)  ^-  (list gift)
  ?~  doy
  ?:  -.i.doy
    $(doy t.doy)
  (weld (i.doy ..mind) $(doy t.doy))
::
++  task  |+(a=_mind *work)                           ::  XX shouldnt need name
++  then  |=(gun=time ..mind(now gun))
++  spin
  |=  peb=rock  ^+  mind
  =+  wax=(burp peb)
  |-  ^+  mind 
  ?~  wax
    ..mind 
  =>  .(..mind (blow wax))
  =+  woe=(walk wax)
  ?:  =(woe wax)
    ~|(%spin-loop !!)
  $(wax woe)
::
++  wait                                              ::  polling wait
  |*  [ned=card run=|+(p=* *(list gift))]
  ^+  task
  |+  dum=mind  ^-  work
  =>  .(..mind dum)
  =+  him=(know ned)
  ?~  him
    [[%| ^|(..$)] ~]
  (run u.him)
::
++  work  (list gift)
--
