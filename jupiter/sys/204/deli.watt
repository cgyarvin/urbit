  :: 
  ::  ?:  (meet -:!;(*type *tank))
  ++  dole
    |-  ^-  veal
    =+  gil=*(set type)
    =+  dex=*(map type ,@)
    =+  ^=  nic
        |=  gum=@  ^-  @tam
        %+  can
          3
        :~  [1 (add 'a' (mod gum 26))]
            [1 (add 'a' (mod (div gum 26) 26))]
            [1 (add 'a' (mod (div gum 676) 26))]
        ==
    =+  ^=  dey
        |=  caf=veal  ^-  veal
        ?.  ?=([%wave *] caf)
          ?:  ?&  ?=  [%pick [%plum %n 0] [%plot [%plum %n 0] [%face *] ~] ~] 
                    caf
                  =(1 (met 3 p.i.t.p.i.t.p.caf))
              ==
            [%unit =<([p q] i.t.p.i.t.p.caf)]
          caf
        ?.  ?&  ?=([%pick *] q.caf)
                ?=(^ p.q.caf)
                =([%plum %n 0] i.p.q.caf)
            ==
          caf
        ?:  ?&  ?=([[%plot * [%stop *] ~] ~] t.p.q.caf)
                =(p.caf p.i.t.p.i.t.p.q.caf)
            ==
          [%beam i.p.i.t.p.q.caf]
        ?:  ?&  ?=([[%plot [%face *] [%face * %stop *] ~] ~] t.p.q.caf)
                =(p.caf p.q.i.t.p.i.t.p.q.caf)
                =(1 (met 3 p.i.p.i.t.p.q.caf))
                =(1 (met 3 p.i.t.p.i.t.p.q.caf))
            ==
          :+  %list
            (cat 3 p.i.p.i.t.p.q.caf p.i.t.p.i.t.p.q.caf)
          q.i.p.i.t.p.q.caf
        caf
    =<  q
    |-  ^-  [p=(map type ,@) q=veal]
    =-  [p.tez (dey q.tez)]
    ^=  tez  ^-  [p=(map type ,@) q=veal]
    ?-    sut
        %noun      [dex sut]
        %void      [dex sut]
        [%atom *]  [dex sut]
        [%cell *]
      =+  hin=$(sut p.sut) 
      =+  yon=$(dex p.hin, sut q.sut)
      :-  p.yon
      :-  %plot
      ?:(?=([%plot *] q.yon) [q.hin p.q.yon] [q.hin q.yon ~])
    ::
        [%core *]
      =+  ^=  ton
          |-  ^-  @
          ?-  q.r.q.sut
            ~        0
            [* ~ ~]  1
            [* ~ *]  +($(q.r.q.sut r.q.r.q.sut))
            [* * ~]  +($(q.r.q.sut l.q.r.q.sut))
            [* * *]  .+  %+  add
                           $(q.r.q.sut l.q.r.q.sut) 
                         $(q.r.q.sut r.q.r.q.sut)
          ==
      =+  ^=  voy
          |-  ^-  (unit ,[p=@ q=@]) 
          ?.  =(%gold p.q.sut)
            ~
          ?:  ?=([%cube @ *] p.sut)
            [~ 0 p.p.sut]
          ?:  ?=([%core *] p.sut)
            =+  voy=$(sut p.sut)
            ?@  voy
              ~
            [~ +(p.u.voy) q.u.voy]
          ~
      ?^  voy
        [dex [%corn ton (nic (mug sut)) u.voy]]
      =+  yad=$(sut p.sut)
      :-  p.yad
      ^-  veal
      :^    %core
          ton
        (nic (mug q.r.q.sut))
      :-  ?-(p.q.sut %gold '.', %iron '|', %lead '?', %zinc '&')
      ?:(?=([%plot *] q.yad) p.q.yad [q.yad ~])
    ::
        [%cube *]
      ?.  ?=(@ p.sut)
        $(sut repo)
      =+  pum=$(sut q.sut)
      ?>  ?=([%atom *] q.pum)
      [p.pum [%plum p.q.pum p.sut]]
    ::
        [%face *]  
      =+  yad=$(sut q.sut)
      [p.yad [%face p.sut q.yad]]
    ::
        [%fine *]  
      =+  yad=$(sut r.sut)
      [p.yad [%fine p.sut (end 0 15 (mug q.sut)) q.yad]]
    ::
        [%fork *]
      =+  hin=$(sut p.sut)
      =+  yon=$(dex p.hin, sut q.sut)
      :-  p.yon
      ?:  =(%void q.hin)
        q.yon
      ?:  |(=(%void q.yon) =(q.hin q.yon))
        q.hin
      :-  %pick
      ?.  ?=([%pick *] q.yon)
        [q.hin q.yon ~]
      ?>  ?=(^ p.q.yon)
      ?:(=(q.hin i.p.q.yon) p.q.yon [q.hin p.q.yon])
    ::
        [%hold *]
      =+  hey=(~(get by dex) sut)
      ?^  hey
        [dex [%stop u.hey]]
      ?:  (~(has in gil) sut)
        =+  dyr=~(wyt by dex)
        [(~(put by dex) sut dyr) [%stop dyr]]
      =+  rom=$(gil (~(put in gil) sut), sut repo)
      =+  rey=(~(get by p.rom) sut)
      ?~  rey
        rom
      [p.rom [%wave u.rey q.rom]]
    ==
  ::
