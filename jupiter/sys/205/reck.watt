=>  |%
    ++  shoe                              ::  trace stack layer
      $%  [%bean p=*]                     ::  raw noun
          [%lose p=term]                  ::  error message
          [%mean p=_|.(*tank)]            ::  prettyprint trigger
          [%pray p=path]                  ::  prayer attempt
          [%spot p=spot]                  ::  source position
      ==
    --
=>  |%
    ++  swan
      |=  yos=shoe  ^-  tank
      ?-  -.yos
        %bean  (show %q p.yos)
        %lose  (show %t p.yos)
        %mean  $:p.yos
        %pray  (show %h p.yos)
        %spot  (show %o p.yos)
      == 
    ::
    ++  visc
      |=  typ=type  ^-  tank 
      (dial:ut ~(dole ut typ))
    ::
    ++  vise
      |=  vax=vase  ^-  tank
      (dish:ut ~(dole ut p.vax) q.vax)
    ::
    ++  wash
      |=  [[tab=@ edg=@] tac=tank]  ^-  wall
      (~(win re tac) tab edg) 
    --
=>  #/+byng
=>  |%
    ++  gill  ,[p=(list fact) q=(list verb)]
    ++  verb
      $%  [%do p=@ta q=*]                     ::  application command
          [%li p=@ud q=@ta]                   ::  command line
          [%yo p=@ud q=tank]                  ::  print at tab
      ==
    ++  yawl  _(hull)
    --
|=  who=@h
=+  why=(rent %h who)
=+  loc=`path`[why ~]
=+  ^=  pod  ^-  (list ,[p=term q=yawl])
    :~  [%bede (hull loc #/+bede)]
    ==
|%
++  boot
  |=  now=date  ^-  gall
  (club now *lens |=([nom=@ta yal=yawl] (init:yal now)))
::
++  club
  |=  [now=date cam=lens wig=_|+([@ta yawl] [p=*deed q=*yawl])]
  ~|  %reck-club
  ^-  gall
  =-  ?~  p.p.tob
        tob
      =>  .(..club q.tob)  
      =+  cyt=$(wig |+([nom=@ta yal=yawl] (know:yal p.p.tob cam)))
      [[(weld p.p.tob p.p.cyt) (weld q.p.tob q.p.cyt)] q.cyt]
  ^=  tob
  =+  [yom=*gill vap=pod pav=`_pod`~]
  ~|  %club-loop
  |-  ^-  gall
  ?~  vap
    [[(flop p.yom) (flop q.yom)] ..club(pod (flop pav))]
  =+  wuv=(wig i.vap)
  =+  myx=(kiss:q.wuv now cam p.wuv) 
  %=  $
    vap    t.vap
    p.yom  (weld p.myx p.yom)
    q.yom  (weld (turn q.myx |=(a=* (verb a))) q.yom)
    pav    [[p.i.vap r.myx] pav]
  ==
::
++  flog
  |=  [now=date vox=*]  ^-  gall
  ~|  %reck-flog
  =>  .(vox (verb vox))
  ?-    vox
      [%do *]
    %^    club
        now
      xray
    |=  [nom=@ta yal=yawl]
    ^-  [p=deed q=yawl]
    [?.(=(p.vox nom) ~ [%feed q.vox]) yal]
  ::
      [%li *]
    $(vox [%do %bede %line p.vox q.vox])
  ::
      [%yo *]
    [[~ ~] ..flog]
  ==
++  gall  ,[p=gill q=_..gall]
++  xray
  ^-  lens
  |=  hap=path  ^-  brig
  =+  ^=  pos  |-  ^-  (unit path)
      ?~(hap ~ ?~(loc [~ hap] $(hap t.hap, loc t.loc)))
  ?:  |(?=(~ pos) ?=(~ u.pos))
    [~ ~]
  =+  dop=pod
  |-  ^-  brig
  ?~  dop
    [~ ~]
  ?:  =(i.u.pos p.i.dop)
    (film:q.i.dop t.u.pos)
  $(dop t.dop)
--
