!:
::          %reck layer 0.  This file is in the public domain.
::
|%
++  zuul
  !!
++  hy
  =>  |%
      ++  base  ,@p                                       ::  node identity
      ++  code  ,@uvI                                     ::  symmetric key
      ++  land  ,[p=regn q=base]                          ::  regime
      ++  hand  ,@uvI                                     ::  hash of code
      ++  pack  ,@uv                                      ::  packet
      ++  regn  ,@ud                                      ::  regime number
      ++  salt  ,@uv
      --
  =>  |%
      ++  gift
        $%  :*  ~                                         ::  result
                who=@p                                    ::  identity
                pax=path                                  ::  name
                hut=*                                     ::  value
            ==                                            ::
            :*  %sym                                      ::  need code
                who=@p                                    ::  identity
                reg=@ud                                   ::  regime
                tag=hand                                  ::  key hash
                how=_|+(key=code *(list gift))            ::
            ==                                            ::
            :*  %pri                                      ::  need ring
                who=@p                                    ::  identity
                reg=@ud                                   ::  regime
                how=_|+(pri=ring *(list gift))            ::  continue
            ==
            :*  %pub                                      ::  need pass
                who=@p                                    ::  identity
                reg=@ud                                   ::  regime
                how=_|+(pub=pass *(list gift))            ::  continue
            ==                                            ::
            :*  %pri                                      ::
                lad=land                                  ::
                how=_|+(pri=ring *(list gift))            ::
            ==                                            ::
        ==
      ++  plan                                            ::  message source
        $%  :*  %bu                                       ::  bundle
                all=(list plan)                           ::  messages
            ==                                            ::
            :*  %da                                       ::  data
                pax=path                                  ::  name
                hut=*                                     ::  value
            ==                                            ::
            :*  %pe                                       ::  public (sealed)
                too=base                                  ::  receiver
                pay=plan                                  ::  payload
            ==
            :*  %pg                                       ::  public (signed)
                fro=base                                  ::  sender
                pay=plan                                  ::  payload
            ==
            :*  %sc                                       ::  symmetric crypt
                fro=base                                  ::  sender
                too=base                                  ::  receiver
                pay=plan                                  ::  payload
            ==                                            ::
        ==
      ++  deed
        $%  :*  ~                                         ::  action
                paq=pack                                  ::  packet
            ==                                            ::
            :*  %his                                      ::  need foreign regn
                who=base                                  ::
                how=_|+(ren=regn deed)                    ::
            ==                                            ::
            :*  %mor                                      ::  deed chain
                fir=deed                                  ::
                how=_|+(paq=pack deed)                    ::
            ==                                            ::
            :*  %our                                      ::  need home regn
                who=base                                  ::
                how=_|+(ren=regn deed)                    ::
            ==                                            ::
            :*  %pri                                      ::  need private key
                who=land                                  ::
                how=_|+(pub=pass deed)                    ::
            ==                                            ::
            :*  %pub                                      ::  need public key
                who=land                                  ::
                how=_|+(pub=pass deed)                    ::
            ==                                            ::
            :*  %sal                                      ::  need salt
                how=_|+(sal=salt deed)                    ::
            ==                                            ::
            :*  %sym                                      ::  need code
                fro=land                                  ::
                too=land                                  ::
                how=_|+(key=code deed)                    ::
            ==                                            ::
        ==
      --
  |%
  ++  boil                                                ::  decode packet
    |=  paq=pack
    ^-  gift
    !!
  ::
  ++  jerk                                                ::  encode packet(s)
    |=  lan=plan
    =+  ^=  mor
        |=  [dyd=deed how=_|+(paq=pack deed)]  ^-  deed
        ?~(-.dyd (how paq.deed) [%mor dyd how])
    =+  ^=  box
        |=  [tag=@tas bod=@]
        (can 3 [2 tag] [(met 3 bod) bod] ~)
    =+  ^=  ses
        |=  [sal=@ bod=@]
        (can 5 [8 sal] [(met 5 bod) bod] ~)
    ^-  deed
    ?-    -.lan
        %bu
      |-  ^-  deed
      =+  pez=*(list pack)
      ?~  all.lan
        [~ (box %bu (jam (flop pez)))]
      %+  mor
        ^$(lan i.all.lan)
      |=(paq=pack ^$(lan t.all.lan, pez [paq pez]))
    ::
        %da
      [~ (box %da (jam pax.lan hut.lan))]
    ::
        %pe
      :+  %his
        too.lan
      |=  his=regn
      :+  %pub
        [his too.lan]
      |=  pub=pass
      :-  %sal
      |=  sal=salt
      %+  mor
        ^^^$(lan pay.lan) 
      |=  paq=pack
      [~ (box %pe (seal:ar pub (ses sal paq)))]
    ::
        %pg
      :+  %our
        fro.lan
      |=  our=regn
      :+  %pri
        [our fro.lan] 
      |=  pri=ring
      :-  %sal
      |=  sal=salt
      %+  mor
        ^^^$(lan pay.lan)
      |=  paq=pack
      [~ (box %pg (sign:ar pri (ses sal paq)))]
    ::
        %sc
      :+  %our
        fro.lan
      |=  our=regn
      :+  %his
        too.lan
      |=  his=regn
      :+  %sym
        [[our our.lan] [his his.lan]]
      |=  key=code
      :-  %sal
      |=  sal=salt
      %+  mor
        ^^^^$(lan pay.lan)
      |=  paq=pack
      [~ (box %sc (jam (shax key) (shed key paq)))]
    ==
  --
--
