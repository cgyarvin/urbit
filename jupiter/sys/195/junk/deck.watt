=>  |%
    ++  bill  ,[p=time q=*]                       ::  monotonic time and value
    ++  brig  ,[o=(unit bill) v=(map span brig)]  ::  raw path tree
    ++  case  ,[p=path q=(list ,[p=@ud q=bill])]  ::  sequence report
    ++  fact  ,[p=path q=bill]                    ::  monotonic binding
    ++  hapt  path                                ::  reversed path
    ++  quid  ,[p=(unit time) q=(unit time)]      ::  query window
    ++  quip  ,[p=quid q=quiz]                    ::  windowed query
    ++  quiz  (list $|(span _|+(span ?)))         ::  path filter
    --
=+  [ear=*(map path ,@) rig=*brig]
=>  |%
    ++  chit
      |=  [lap=path rig=brig]
      ^-  brig
      ?~  lap
        rig
      =+  yiq=(~(get by v.rig) i.lap)
      ?~  yiq  
        [~ ~]
      $(lap t.lap, rig u.yiq)
    ::
    ++  clot
      |=  [lap=path byl=(unit bill) rig=brig]  ^-  brig
      ~|  %clot
      ?~  lap
        ?>  =(~ o.rig)
        [byl v.rig]    
      :-  o.rig
      =+  soz=(~(get by v.rig) i.lap)
      =+  mal=?~(soz [~ ~] u.soz)
      (~(put by v.rig) i.lap $(lap t.lap, rig mal))
    :: 
    ++  colt                                  ::  try decimal span
      |=  san=span  ^-  (unit ,@ud)
      =+  vec=(slay san)
      ?.  &(?=(^ vec) ?=([%% %ud *] u.vec))
        ~
      [~ q.p.u.vec]
    ::
    ++  cork                                  ::  try decimal end 
      |=  lap=path
      ^-  (unit ,[p=@ud q=path])
      =+  ram=(flop lap)
      ?~  ram
        ~
      =+  rok=(colt i.ram)
      ?~(rok ~ [~ u.rok (flop t.ram)])
    ::
    ++  dulp                                  ::  XX duh use list comps
      |=  pud=(list (list fact))
      ^-  (list fact)
      ?~  pud
        ~
      |-  ^-  (list fact)
      ?~  i.pud
        ^$(pud t.pud)
      [i.i.pud $(i.pud t.i.pud)]
    ::
    ++  crab                                  ::  general brig traverse
      |*  :*  qex=quiz
              bay=_|+([ram=hapt reb=brig] *)
          ==
      =+  [ram=*hapt rif=*(list ,_*bay)]
      |-  ^+  rif
      ?~  qex
        [(bay ram rig) rif]
      ?@  i.qex
        =+  zix=(~(get by v.rig) i.qex)
        ?~  zix
          rif
        $(ram [i.qex ram], rig u.zix, qex t.qex)
      =+  dib=(~(tap by v.rig) ~)
      |-  ^+  rif
      ?~  dib
        rif
      ?.  (i.qex p.i.dib)
        $(dib t.dib)
      ^$(ram [p.i.dib ram], rig q.i.dib, rif $(dib t.dib))
    ::
    ++  hank                                  ::  traverse for series
      |=  qex=quiz
      ^-  (list (list fact))
      %+  crab
        qex
      |=  [ram=hapt reb=brig]
      =+  rex=*(list fact)
      |-  ^+  rex
      =+  dib=(~(tap by v.reb) ~)
      =+  ^=  beq
          |-  ^-  (list fact)
          ?~  dib
            rex      
          ^$(ram [p.i.dib ram], reb q.i.dib, rex $(dib t.dib))
      ?~  o.reb
        beq
      [[(flop ram) u.o.reb] beq]
    ::
    ++  honk                                  ::  traverse for sequence
      |=  qex=quiz
      ^-  (list case)
      %+  crab
        qex
      |=  [ram=hapt reb=brig]  
      ^-  [p=path q=(list ,[p=@ud q=bill])]
      :-  (flop ram)
      =-  (sort roo |=([a=[p=@ud q=bill] b=[p=@ud q=bill]] (lth p.a p.b)))
      ^=  roo
      =+  dib=(~(tap by v.reb) ~)
      |-  ^-  (list ,[p=@ud q=bill])
      =+  hoc=$(dib t.dib)
      ?~  dib
        hoc
      =+  yop=(colt p.i.dib)
      ?:  |(?=(~ yop) =(0 u.yop) ?=(~ o.q.i.dib))
        hoc
      [[u.yop u.o.q.i.dib] hoc]
    ::
    ++  hesh                                  ::  groom raw sequence
      |=  [wid=quid foy=(list ,[p=@ud q=bill])]
      ^-  (list ,[p=@ud q=bill])
      =>  ^+  .  
          %=    .
              foy
            =+  num=1
            |-  ^+  foy
            ?~  foy
              ~
            ?.(=(num p.i.foy) ~ [i.foy $(foy t.foy, num +(num))])
          ==
      =>  ^+  .
          %=    .
              foy
            ?~  p.wid
              foy
            |-  ^+  foy
            ?~  foy
              ~
            ?:((gth p.q.i.foy u.p.wid) foy $(foy t.foy))
          ==
      ?~  q.wid
        foy
      |-  ^+  foy
      ?~  foy
        ~
      ?:((gth p.q.i.foy u.q.wid) ~ [i.foy $(foy t.foy)])
    ::
    ++  slit                                  ::  filter series
      |=  [wid=quid rex=(list fact)]
      ^-  (list fact)
      ?~  rex
        ~
      =+  xar=$(rex t.rex)
      ?.  ?&  |(?=(~ p.wid) (gte p.q.i.rex u.p.wid))
              |(?=(~ q.wid) (lte p.q.i.rex u.q.wid))
          ==
        xar
      [i.rex xar]
    ::
    ++  tort                                  ::  sort by time
      |=  rex=(list fact)  ^-  (list fact)
      %+  sort
        rex
      |=  [a=fact b=fact]
      ?:(=(p.q.a p.q.b) (aor a b) (lth p.q.a p.q.b))
    --
|%
++  deck
  |%                                            ::  external interface
  ++  mine                                      ::  series query
    |=  [wid=quid qex=quiz]                      
    ^-  (list fact)
    (slit wid (tort (dulp (hank qex))))
  ::
  ++  plow                                      ::  sequence query
    |=  [wid=quid qex=quiz]
    ^-  (list case)
    (turn (honk qex) |=(a=case [p.a (hesh wid q.a)]))
  ::
  ++  post                                      ::  add to sequence
    |=  [now=time lap=path val=*]
    ^-  [p=@ud q=_..post]
    =+  laz=(~(get by ear) lap)
    =+  dar=?~(laz 1 u.laz)
    :-  dar
    =>  .(rig (clot (flop `path`[(rent %ud dar) (flop lap)]) [~ now val] rig))
    =+  wys=(chit lap rig)
    =+  suz=+(dar)
    |-  ^+  ..post
    ?:  =(~ (~(has by v.wys) (rent %ud suz)))
      ..post(ear (~(put by ear) lap suz))
    $(suz +(suz))
  ::
  ++  putt                                      ::  write (or crash)
    |=  [now=time lap=path val=*]
    ^+  ..putt
    =+  yop=(cork lap)
    ?:  ?&  ?=(^ yop)
            =+(gef=(~(get by ear) q.u.yop) =(?~(gef 1 u.gef) p.u.yop))
        ==
      q:(post now q.u.yop val)
    ..putt(rig (clot lap [~ now val] rig))
  --
--

