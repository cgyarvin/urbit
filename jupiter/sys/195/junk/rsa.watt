!:
::          %reck layer 0.  This file is in the public domain.
::
|%
++  zuul
  !!
++  ar                                                ::  RSA encryption
  |%
  ++  brew                                            ::  generate ring
    |=  [a=@ b=@]  ^-  ring                           ::  [bits seed]
    =+  c=(rsh 0 1 a)
    (jam (ramp c b) (ramp c (shax b)))
  ::
  ++  chew                                            ::  read with ring, 53
    |=  [a=ring b=@]  ^-  (unit ,@)
    =+  c=(melt 53 a) 
    ?:  (gte b (mul p.c q.c))
      ~
    =+  d=(fu p.c q.c)
    (shed 0 (out.d (exp.d r.c (sit.d b))))
  ::
  ++  drip                                            ::  private to public
    |=  a=ring  ^-  pass
    =+  b=(heat a)
    (mul p.b q.b)
  ::
  ++  heat                                            ::  separate primes
    |=  a=ring  ^-  [p=@ q=@]
    =+  b=(cue a)
    ?>(?=([p=@ q=@] b) b)
  ::
  ++  melt                                            ::  activate ring
    |=  [a=@ b=ring]  ^-  [p=@ q=@ r=@]               ::  a=>e, s=>d
    =+  c=(heat b)
    :+  p.c
      q.c
    (~(inv fo (elcm (dec p.c) (dec q.c))) a)
  ::
  ++  sign                                            ::  send with ring, 37
    |=  [a=ring b=@]  ^-  @
    =+  c=(melt 37 a)
    =>  .(b (shen 0 b))                               ::  scramble RSA input
    ?:  (gte b (mul p.c q.c))
      ~|(%ar-sign !!) 
    =+  d=(fu p.c q.c)
    (out.d (exp.d r.c (sit.d b)))
  ::
  ++  seal                                            ::  send with pass, 53
    |=  [a=pass b=@]  ^-  @
    =>  .(b (shen 0 b))                               ::  scramble RSA input
    ?:  (gte b a)
      ~|(%ar-seal !!)
    (~(exp fo a) 53 b)
  ::
  ++  ramp                                            ::  make r-m prime
    |=  [a=@ b=@]                                     ::  [bits seed]
    =+  c=@
    |-  ^-  @ux
    =+  d=(~(raw og b) a)
    ?:  &(!=(1 (mod d 53)) !=(1 (mod d 37)) (pram d))
      d
    $(b +(b), c (shax c))
  ::
  ++  take                                            ::  read with pass, 37
    |=  [a=pass b=@]  ^-  (unit ,@)
    ?:  (gte b a)
      ~
    (shed 0 (~(exp fo a) 37 b))
  ::
  ++  test
    |=  [a=@ b=@]  ^-  &                              ::  [bits seed]
    =+  wad=(brew a b)
    =+  rig=(drip wad)
    =+  try=[n=(take rig (sign wad b)) l=(chew wad (seal rig b))]
    ?.  =([[~ b] [~ b]] try)
      ~|([%ar-test a b n.try l.try ~] !!)
    %&
  --
--
