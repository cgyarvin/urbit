::
::          %reck layer 2.  This file is in the public domain.
::
=>  ::
  ::::          Tier Qg, request geometry
  ::
  |%
  ++  bead  $_  |+  [now=time who=span]                     ::  app generator
                [p=*lime q=*vane]                           ::
  ++  vane                                                  ::  cargo
    $_  ^?                                                  ::
    |%                                                      ::
    ++  peek  |+([cam=lens hap=path] *(unit))               ::  inspect
    ++  poke  |+([cam=lens man=*] [p=*lime q=^?(..poke)])   ::  apply
    --                                                      ::
  ++  dome    (map span ,[p=(unit time) q=rail])            ::  queries
  ++  fish  _|+([a=path b=* c=bill] *lime)                  ::  series act
  ++  hunt  _|+([a=@ud b=* c=bill] *lime)                   ::  sequence act
  ++  lime                                                  ::  fuel
    $|  ~                                                   ::  noop
    $%  [%all p=(list lime)]                                ::  collection
    ::  [%ban p=span]                                       ::  suspend?
        [%dig p=span q=(list path) r=want]                  ::  request
    ::  [%god p=?(%nuke)]                                   ::  reinstall
    ::  [%nab p=span]                                       ::  resume?
        [%nap p=span q=time r=lime]                         ::  await
        [%net p=span q=quip r=fish]                         ::  find
        [%rod p=span q=quip r=hunt]                         ::  sync
        [%run p=*]                                          ::  command
        [%say p=plum]                                       ::  action
    ==                                                      ::
  ++  rail                                                  ::  query
    $%  [%dig p=bole q=want]                                ::  request
        [%nap p=time q=lime]                                ::  await
        [%net p=quip q=fish]                                ::  find
        [%rod p=quip q=sail r=hunt]                         ::  sync
    ==                                                      ::
  ++  sail  (map path ,@ud)                                 ::  sync state
  ++  want  _|+([a=(list ,[p=path q=bill])] *lime)          ::  request effect
  ++  bole  (list ,[p=path q=(unit bill)])                  ::  request state
  ++  worm  ,[p=(list lime) q=(list plum)]                  ::  work
  --
=>  ::
  ::::          Tier Qm, request mechanics
  ::
  =+  [cam=*lens rof=*dome egg=*vane]
  |%
  ++  hear
    |=  [baz=(list lime) vac=(list fact)]
    ^-  [p=(list lime) q=_..hear]
    =-  [p.rew ..hear(rof q.rew)]
    ^=  rew
    |-  ^-  [p=(list lime) q=dome]
    ?~  rof
      [baz rof]
    =+  yem=$(rof l.rof)
    =+  noy=$(rof r.rof, baz p.yem)
    =>  ^+(. .(baz p.noy, l.rof q.yem, r.rof q.noy))
    ?.  ?=(~ p.q.n.rof)
      [baz rof]
    =+  sey=(lash q.q.n.rof vac baz)
    [p.sey rof(q.n q.sey)]
  ::
  ++  init
    |=  [cym=lens who=span gon=bead]
    ^-  [p=(list plum) q=_..init]
    =+  gub=(gon when:cym who)
    =>  ^+(. .(egg q.gub, cam cym))
    (kick [p.gub ~])
  ::
  ++  kick
    |=  gas=(list lime)
    =+  baw=*worm
    |-  ^-  [p=(list plum) q=_..kick]
    ?~  gas
      ?~  p.baw
        [(flop q.baw) ..kick]
      $(p.baw ~, gas (flop p.baw))
    =+  fel=(kilt i.gas baw)
    $(gas t.gas, baw p.fel, ..kick q.fel)
  ::
  ++  kilt
    |=  [lym=lime baw=worm]
    ~|  %kilt
    ^-  [p=worm q=_..kilt] 
    ?-    lym 
        ~         [baw ..kilt]
    ::
        [%all *]  
      |-  ^-  [p=worm q=_..kilt]
      ?~  p.lym
        [baw ..kilt]
      =+  fel=^$(lym i.p.lym)
      $(p.lym t.p.lym, baw p.fel, ..kilt q.fel)
    ::
        [%dig *]
      =+  ^=  mox
          |-  ^-  [p=? q=(list ,[p=path q=(unit bill)])]
          ?~  q.lym  [& ~]
          =+  mox=$(q.lym t.q.lym)
          =+  wal=(pray:cam i.q.lym)
          [&(!=(~ wal) p.mox) [[i.q.lym wal] q.mox]]
      ?:  p.mox
        :-  :-  :-  %-  r.lym
                    %+  turn
                      q.mox
                    |=(a=[p=path q=(unit bill)] [p.a (need q.a)])
                p.baw
            q.baw
        ..kilt
      [baw ..kilt(rof (~(put by rof) p.lym [~ [%dig q.mox r.lym]]))]
    ::
        [%nap *]
      ?:  (gte when:cam q.lym)
        [[[r.lym p.baw] q.baw] ..kilt]
      [baw ..kilt(rof (~(put by rof) p.lym [~ [%nap q.lym r.lym]]))]
    ::
        [%net *]
      ~|  %kilt-net
      ?>  =(~ (~(get by rof) p.lym))
      =+  lur=(hope:cam q.lym)
      |-  ^-  [p=worm q=_..kilt]
      ?~  lur
        [baw ..kilt(rof (~(put by rof) p.lym [~ [%net q.lym r.lym]]))]
      |-  ^-  [p=worm q=_..kilt]
      ?~  r.i.lur
        ^$(lur t.lur)
      %=  $
        r.i.lur  t.r.i.lur
        p.baw [(r.lym p.i.r.i.lur q.i.lur q.i.r.i.lur) p.baw]
      ==
    ::
        [%rod *]
      ~|  %kilt-rod
      ?>  =(~ (~(get by rof) p.lym))
      =+  hur=`(list case)`(wish:cam q.lym)
      =+  [syl=*sail lax=0]
      |-  ^-  [p=worm q=_..kilt]
      ?~  hur
        [baw ..kilt(rof (~(put by rof) p.lym [~ [%rod q.lym syl r.lym]]))]
      =+  ^=  zey
          =+  zey=[p=1 q=p.baw]
          |-  ^+  zey
          ?~  r.i.hur  zey
          ?>  =(p.zey p.i.r.i.hur)
          %=  $
            r.i.hur  t.r.i.hur
            p.zey    +(p.zey)
            q.zey    [(r.lym p.zey q.i.hur q.i.r.i.hur) q.zey]
          ==
      $(hur t.hur, p.baw q.zey, syl (~(put by syl) p.i.hur p.zey))
    ::
        [%run *]
      =+  leb=(poke:egg cam p.lym)
      [[[p.leb p.baw] q.baw] ..kilt(egg q.leb)]
    ::
        [%say *]  [[p.baw [p.lym q.baw]] ..kilt]
    ==
  ++  kiss
    |=  [fet=fact peq=quip]  ^-  (unit)
    ?.  ?&  |(?=(~ p.p.peq) (gte p.q.fet u.p.p.peq))
            |(?=(~ q.p.peq) (lte p.q.fet u.q.p.peq))
        ==
      ~
    =+  ^=  hoj
        |-  ^-  (unit path)
        ?~  p.q.peq
          [~ p.fet]
        ?:  |(?=(~ p.fet) !=(i.p.q.peq i.p.fet))
          ~
        $(p.q.peq t.p.q.peq, p.fet t.p.fet)
    ?~(hoj ~ (q.q.peq u.hoj))
  ::
  ++  lash
    |=  [tec=rail vac=(list fact) baz=(list lime)]
    ^-  [p=(list lime) q=[p=(unit time) q=rail]]
    ?-    tec
        [%dig *]
      =-  ?.  p.mig
            [baz ~ tec(p q.mig)]
          :+  :-  %-  q.tec
                  (turn p.mig |=(a=[p=path q=(unit bill)] [p.a (need q.a)]))
              baz
            [~ when:cam]
          tec(p q.mig)
      ^=  mig
      |-  ^-  [p=? q=bole]
      ?~  p.tec
        [& ~]
      =+  gel=$(p.tec t.p.tec)
      =-  [&(p.gel ?=(^ q.eyl)) [eyl q.gel]]
      ^=  eyl  ^-  [p=path q=(unit bill)]
      ?.  ?=(~ q.i.p.tec)
        i.p.tec
      |-  ^-  [p=path q=(unit bill)]
      ?~  vac
        i.p.tec
      ?.(=(p.i.p.tec p.i.vac) $(vac t.vac) [p.i.vac [~ q.i.vac]])
    ::
        [%nap *]
      ?.  (gte when:cam p.tec)
        [baz ~ tec]
      [[q.tec baz] [~ when:cam] tec]
    ::
        [%net *]
      :+  |-  ^-  (list lime)
          ?~  vac
            baz
          =+  mey=(kiss i.vac p.tec)
          $(vac t.vac, baz ?~(mey baz [(q.tec p.i.vac u.mey q.i.vac) baz]))
        ~
      tec
    ::
        [%rod *]
      =-  [q.woy ~ tec(q p.woy)]
      ^=  woy  
      |-  ^-  [p=sail q=(list lime)]
      ?~  vac
        [q.tec baz]
      =+  ter=$(vac t.vac)
      =+  zav=(cork p.i.vac)
      ?~  zav
        ter
      =+  mey=(kiss [q.u.zav q.i.vac] p.tec)
      ?~  mey
        ter
      =+  rey=(~(get by p.ter) q.u.zav)
      =+  bem=?~(rey 1 +(u.rey))
      ?.  =(bem p.u.zav)
        ter
      =>  ^+(. .(baz [(r.tec bem u.mey q.i.vac) baz]))
      =-  [(~(put by p.ter) q.u.zav p.fyq) q.fyq]
      ^=  fyq
      |-  ^-  [p=@ud q=(list lime)] 
      =+  vat=(flop [~(rent co [~ %ud +(bem)]) (flop q.u.zav)])
      =+  pey=(pray:cam vat)
      ?~  pey
        [bem baz]
      $(bem +(bem), baz [(r.tec +(bem) u.mey u.pey) baz])
    ==
  --
=>  ::
  ::::          Tier Qi, request interface
  ::
  |%  
  ++  hull
    |=  [cam=lens who=span gon=bead]
    ^-  [p=(list plum) q=ship]
    =+  tov=(init cam who gon)
    :-  p.tov
    =>  `_..init`q.tov
    |%  
    ++  peek  |=([cam=lens hap=path] (peek:egg cam hap))
    ++  poke  |=  [cym=lens poc=pork]
              =>  ^+(. .(cam cym))
              ^-  [p=(list plum) q=_..poke]
              =+  ^=  hez  ^-  [p=(list lime) q=(list fact)]
                  ?-  poc
                    ~        [~ ~]
                    [%do *]  [[[%run p.poc] ~] ~]
                    [%nu *]  [~ [p.poc ~]]
                  ==
              =+  lim=(hear p.hez q.hez)
              =>  ^+(. .(..hear q.lim))
              =+  myt=(kick (flop p.lim))
              [(flop p.myt) ..poke(..kick q.myt)]
    --
  --
.
