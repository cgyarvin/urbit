::
++  flay
  ~.  %flay
  |=  pok=port  ^-  [p=axis q=type]
  :-  p.pok
  ?-  -.q.pok
    &  p.q.pok
    |  (roll q.q.pok =+([p=[p=*type q=*foot] q=`type`%void] |.((fork p.p q))))
  ==
  ::
  ++  sick
    ~.  %seek
    |=  hyp=twig  ^-  port
    ?~  hyp
      [1 %& sut]
    =>  .(i.hyp ?^(i.hyp i.hyp [%| p=0 q=i.hyp]))
    =+  zar=$(hyp t.hyp)
    =+  wig=(flay zar)
    =+  ^=  sic  ^-  (unit port)
        ~|  %seek-soft
        ?.  &(?=([| *] i.hyp) ?=([| *] q.zar))
          ~
        =+  kis=(silk q.i.hyp zar)
        ?~  kis
          ~
        |-  ^-  (unit port)
        ?:  =(0 p.i.hyp)
          kis
        $(p.i.hyp (dec p.i.hyp), kis [~ (need (silk q.i.hyp u.kis))])
    ?.  ?=(~ sic)
      u.sic
    ~|  %seek-hard
    =>  .(sut q.wig)
    ?-    i.hyp
        [& *]  [(peg p.wig p.i.hyp) %& (peek %read p.i.hyp)]
        [| *] 
      |-  ^-  port
      =+  wed=(fink %read q.i.hyp)
      ?~  wed
        ~|(%find-none !!)
      ?:  =(0 p.i.hyp)
        [(peg p.wig p.wed) q.wed]
      =+  wag=(fray wed)
      $(p.i.hyp (dec p.i.hyp), sut q.wag, p.wig (peg p.wig p.wag))
    ==
  ::
  ++  tacq
    ~.  %tack
    |=  [peh=twig mur=type]
    =+  axe=1
    |-  ^-  [p=axis q=type]
    ?~  peh
      [axe mur]
    =>  .(i.peh ?^(i.peh i.peh [%| p=0 q=i.peh]))
    ?-    i.peh
        [& *]
      =+  vas=(peek %rite p.i.peh)
      =+  gav=$(peh t.peh, sut vas, axe (peg axe p.i.peh))
      [p.gav (heal ~ p.i.peh q.gav)]
    ::
        [| *]
      =+  vif=(fink %rite q.i.peh)
      |-  ^-  [p=axis q=type]
      ?:  =(0 p.i.peh)
        =+  fap=(flay vif)
        =+  gav=^$(peh t.peh, sut q.fap, axe (peg axe p.fap))
        [p.gav (heal [~ i.peh] p.fap q.gav)]
      =+  fiz=(fray vif)
      =+  gav=$(p.i.peh (dec p.i.peh), sut q.fiz, axe (peg axe p.fiz))
      [p.gav (heal ~ p.fiz q.gav)]
    ==



  ::
  ++  sick
    ~.  %seek
    |=  [way=?(%read %rite) hyp=twig]
    ^-  port
    ?~  hyp
      [1 %& sut]
    =>  .(i.hyp ?^(i.hyp i.hyp [%| p=0 q=i.hyp]))
    =+  zar=$(hyp t.hyp)
    =+  wig=(flay zar)
    ~~  (dunk(sut q.wig) %seek-from)
    ~~  %-  show  :*
          [%c %seek-limb]
          ?-  i.hyp
            [& *]  [%d p.i.hyp]
            [| *]  [[%d p.i.hyp] ?:(=(0 q.i.hyp) '%$' [%a q.i.hyp])]
          ==
        ==
    =+  ^=  sic  ^-  (unit port)
        ~|  %seek-soft
        ?.  &(?=([| *] i.hyp) ?=([| *] q.zar))
          ~
        =+  kis=(silk q.i.hyp zar)
        ?~  kis
          ~
        |-  ^-  (unit port)
        ?:  =(0 p.i.hyp)
          kis
        $(p.i.hyp (dec p.i.hyp), kis [~ (need (silk q.i.hyp u.kis))])
    ?.  ?=(~ sic)
      u.sic
    ~|  %seek-hard
    =>  .(sut q.wig)
    ?-    i.hyp
        [& *]  [(peg p.wig p.i.hyp) %& (peek way p.i.hyp)]
        [| *] 
      |-  ^-  port
      =+  wed=(find 0 way q.i.hyp)
      ?~  wed
        ~|(%find-none !!)
      ?:  =(0 p.i.hyp)
        [(peg p.wig p.u.wed) q.u.wed]
      =+  wag=(fray u.wed)
      $(p.i.hyp (dec p.i.hyp), sut q.wag, p.wig (peg p.wig p.wag))
    ==
