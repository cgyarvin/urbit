=>  ut
  |%
  ++  dish
    |=  [ham=veal lum=*]  ^-  tank
    ~|  %dish
    =+  dal=*(map ,@ veal)
    %-  need
    |-  ^-  (unit tank)
    ?+    ham  ~|([%dish-none ham] !!)
        %noun
      %=    $
          ham
        ?:  ?=(@ lum)
          [%atom %%]
        :-  %plot
        |-  ^-  (list veal)
        [%noun ?:(?=(@ +.lum) [[%atom %%] ~] $(lum +.lum))]
      ==
    ::
        %tank
      =+  cis=(tank lum)
      ?.(=(lum cis) ~ [~ cis])
    ::
        %void
      ~
    ::
        [%atom *]
      ?.  ?=(@ lum)
        ~
      [~ %leaf ?:(=(%% p.ham) (rend [%ud lum]) (rend p.ham lum))]
    ::
        [%beam *]
      =-  ?~(tok ~ [~ %rose [[' ' ~] ['(' ~] [')' ~]] u.tok])
      ^=  tok
      |-  ^-  (unit (list tank))
      ?:  ?=(@ lum)
        ?.(=(~ lum) ~ [~ ~])
      =+  [for=^$(ham p.ham, lum -.lum) aft=$(lum +.lum)]
      ?.  &(?=(^ for) ?=(^ aft))
        ~
      [~ u.for u.aft]
    ::
        [%corn *]
      ?.  ?=(^ lum)
        ~
      [~ (dial ham)]
    ::
        [%core *]
      =+  wal=$(ham [%plot s.ham], lum -.lum)
      ?~  wal
        ~
      :-  ~
      :+  %palm
        :+  [' ' ~] 
          =+  qaz=(rend %uv q.ham)
          ;:  weld 
            (rend %ud p.ham) 
            [r.ham ~]
            (rend %tam q.ham)
          ==
        [['<' ~] ['>' ~]]
      ?>(?=([%rose *] u.wal) q.u.wal)
    ::
        [%face *]
      =+  wal=$(ham q.ham)
      ?~  wal
        ~
      [~ %palm [['=' ~] ~ ~ ~] [%leaf (trip p.ham)] u.wal ~]
    ::
        [%fine *]
      $(ham r.ham)
    ::
        [%list *]
      =-  ?~  tok 
            ~ 
          [~ %rose [[' ' ~] (weld (trip p.ham) '(' ~) [')' ~]] u.tok]
      ^=  tok
      |-  ^-  (unit (list tank))
      ?:  ?=(@ lum)
        ?.(=(~ lum) ~ [~ ~])
      =+  [for=^$(ham q.ham, lum -.lum) aft=$(lum +.lum)]
      ?.  &(?=(^ for) ?=(^ aft))
        ~
      [~ u.for u.aft]
    ::
        [%pick *]
      |-  ^-  (unit tank)
      ?~  p.ham
        ~
      =+  wal=^$(ham i.p.ham)
      ?~  wal
        $(p.ham t.p.ham)
      wal
    ::
        [%plot *]
      =-  ?~  tok 
            ~ 
          [~ %rose [[' ' ~] ['[' ~] [']' ~]] u.tok]
      ^=  tok
      |-  ^-  (unit (list tank))
      ?~  p.ham
        ~
      ?:  ?=([* ~] p.ham)
        =+  wal=^$(ham i.p.ham)
        ?~(wal ~ [~ [u.wal ~]])
      =+  gim=^$(ham i.p.ham, lum -.lum) 
      ?~  gim
        ~
      =+  myd=$(p.ham t.p.ham, lum +.lum)
      ?~  myd
        ~
      [~ u.gim u.myd]
    ::
        [%plum *]
      ?.  =(lum q.ham)
        ~
      =+  fox=(rend p.ham q.ham)
      [~ %leaf ?:(=(['~' ~] fox) fox ['%' fox])]
    ::
        [%stop *]
      =+  kep=(~(get by dal) p.ham)
      ?~  kep
        ~|([%stop-loss p.ham] !!)
      $(ham u.kep)
    ::
        [%tree *]
      =-  ?~  tok 
            ~ 
          [~ %rose [[' ' ~] (weld (trip p.ham) '(' ~) [')' ~]] u.tok]
      ^=  tok
      =+  tuk=*(list tank)
      |-  ^-  (unit (list tank))
      ?:  =(~ lum)
        [~ tuk]
      ?.  ?=([n=* l=* r=*] lum)
        ~
      =+  rol=$(lum r.lum)
      ?~  rol
        ~
      =+  tim=^$(ham q.ham, lum n.lum)
      ?~  tim
        ~
      $(lum l.lum, tuk [u.tim u.rol])
    ::
        [%unit *]
      =-  ?~  tok 
            ~ 
          [~ %rose [[' ' ~] (weld (trip p.ham) '(' ~) [')' ~]] u.tok ~]
      ^=  tok  ^-  (unit tank)
      ?@  lum
        ?.(=(~ lum) ~ [~ %leaf '~' ~])
      ?.  =(~ -.lum)
        ~
      =+  wal=$(ham q.ham)
      ?~  wal
        ~
      [~ u.wal]
    ::
        [%wave *]
      $(dal (~(put by dal) p.ham q.ham), ham q.ham)
    ==
  --
