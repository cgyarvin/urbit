=>  |% 
    ++  arch                                        ::  fs node
      $%  [& clod]                                  ::  ie, file
          [| dirt]                                  ::  ie, directory
      ==                                            ::
    ++  clod  ,[p=time q=tray]                      ::  mtime content
    ++  dirt  ,[p=time q=(map span arch)]           ::  mtime listing
    ++  deed                                        ::  operation
      $%  [%gv p=path q=tray]                       ::  write file
          [%kl p=path]                              ::  remove file
      ==                                            ::
    ++  meta                                        ::  path metadata
      $%  [& p=time q=@]                            ::  mtime bytelen
          [| p=time q=(list span)]                  ::  mtime dir
      ==                                            ::
    ++  tray  ,[p=@ q=@]                            ::  bytelen data
    --
|%
++  cy
  =+  a=*arch
  |%  
  ++  also                                          ::  metadata
    |=  hap=path  ^-  meta
    ?~  hap
      ?-  a
        [& *]  [%& p.a p.q.a]
        [| *]  [%| p.a (turn (~(tap by q.a) ~) |=([p=span q=arch] p))]
      ==
    ?-  a
      [& *]  [%| 0 ~]
      [| *]  =+(gos=(~(get by q.a) i.hap) ?~(gos [%| 0 ~] $(a u.gos)))
    ==
  ::
  ++  flog                                          ::  modify
    |=  [now=time duz=deed]
    ?-  duz
      [%gv *]   (give now p.duz q.duz)
      [%kl *]   (kill now p.duz)
    ==
  ::
  ++  give                                          ::  apply
    |=  [now=time hap=path dat=tray]
    ^-  arch
    ?~  hap
      ?:  &(?=(& -.a) =(q.a dat))
        a
      [%& now dat]
    ?-  a
      [& *]  $(a [%| 0 ~])
      [| *]  [%| now (~(put by q.a) i.hap $(hap t.hap))]
    ==
  ::
  ++  grab                                          ::  just the data
    |=  hap=path
    ^-  (unit ,@)
    =+  yed=(sift hap)
    ?.  ?=([& *] yed)
      ~
    [~ q.q.yed]
  ::
  ++  kill                                          ::  delete
    |=  [now=time hap=path]
    ^-  arch
    ?~  hap
      [%| 0 ~]
    ?-    a
        [& *]  [%| 0 ~] 
        [| *]
      =+  gos=(~(get by q.a) i.hap)
      ?~  gos
        a
      =+  weh=$(a u.gos, hap t.hap)
      ?:  =([| 0 ~] weh)
        [%| p.a (~(del by q.a) i.hap)]
      [%| p.a (~(put by q.a) i.hap weh)]
    ==
  ::
  ++  sift                                          ::  select subtree
    |=  hap=path
    ^-  arch
    ?~  hap
      a
    ?-    a
        [& *]  [%| 0 ~]
        [| *]  
      =+  gos=(~(get by q.a) i.hap) 
      ?~(gos [%| 0 ~] $(hap t.hap, a u.gos))
    ==
  --
--
