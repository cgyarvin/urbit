=>  |%
    ++  bill  ,[p=date q=*]
    ++  brig  ,[o=(unit bill) v=(map span brig)]
    ++  beef  ,*
    ++  crib  $_
              ^?  |%
                  ++  boot
                    |+  [now=date loc=path]
                    [p=*deed q=^?(..boot)]
                  :: 
                  ++  peek
                    |+  [now=date cam=lens rel=path]
                    *brig
                  ::
                  ++  poke
                    |+  [now=date cam=lens man=beef]
                    [p=*deed q=^?(..poke)]
                  --
    ++  date  time
    ++  deed                                            ::  hull action
      $|  ~                                             ::  no operation
      $%  [%feed p=beef]                                ::  typeless input
          [%fish p=term q=quid r=pane s=fish]           ::  listen: set
          [%give p=gift]                                ::  release: output
      ::  [%halt p=term]                                ::  listen: suspend
          [%hunt p=term q=quid r=pane s=hunt]           ::  listen: sequence
          [%more p=(list deed)]                         ::  many dark deeds
          [%post p=path q=*]                            ::  apply: sequence
          [%save p=path q=*]                            ::  apply: store 
      ::  [%thaw p=term]                                ::  listen: resume
          [%wait p=term q=date r=wait]                  ::  listen: time
          [%want p=term q=(list path) r=want]           ::  listen: block
      ==
    ++  fact  ,[p=path q=bill]
    ++  fish  _|+([path bill] *deed)
    ++  gift  ,*
    ++  lens  _|+(path *brig)
    ++  hunt  _|+([@ path bill] *deed)
    ++  pane  $|(date [p=date q=date])
    ++  quid  ,[p=root q=(list $|(span _|+(span ?)))]
    ++  root  $|(~ [~ p=@])
    ++  sail  $:  ear=(map path ,@)
                  fis=(map term ,[p=? q=quid r=pane s=fish])
                  hut=(map term ,[p=? q=quid r=pane s=hunt])
                  wan=(map term ,[p=(list ,[p=path q=(unit bill)]) q=want])
                  wit=(list ,[p=date q=wait])
              ==
    ++  want  _|+((list ,[p=path q=bill]) *deed)
    ++  wait  _|+(date *deed)
    --
|%
::
++  brag
  |=  [hip=path byl=(unit bill) rig=brig]  ^-  brig
  ?~  hip
    [byl v.rig]    
  :-  o.rig
  =+  soz=(~(get by v.rig) i.hip)
  =+  mal=?~(soz [~ ~] u.soz)
  (~(put by v.rig) i.hip $(hip t.hip, rig mal))
::
++  bred
  |=  [hip=path rig=brig]  ^-  brig
  ?~  hip
    rig
  =+  yiq=(~(get by v.rig) i.hip)
  ?~  yiq  [~ ~]
  $(hip t.hip, rig u.yiq)
::
++  deem
  |=  yal=(list deed)  ^-  deed
  ?~(yal ~ (deet i.yal $(yal t.yal)))
::
++  deet
  |=  [yin=deed yag=deed]
  ^-  deed
  ?:  =(~ yin)  yag
  ?:  =(~ yag)  yin
  ?:  ?=([%more *] yag)
    ?:  ?=([%more *] yin)
      [%more (weld p.yin p.yag)]
    [%more yin p.yag]
  [%more yin yag ~]
::
++  hull
  |=  :*  loc=path                                  ::  global root path
          egg=crib                                  ::  business logic
      ==
  =+  :*  tar=*brig                                 ::  static storage
          arc=*sail                                 ::  control state
      ==
  |%
  ++  film                                          ::  namespace
    ^-  lens
    |=  hip=path  ^-  brig
    ?~  hip  [~ ~]
    ?.  =(%y i.hip)  [~ ~]
    (bred hip tar)
  ::
  ++  hark                                          ::  deed by time
    |=  wen=date  ^-  [p=deed q=_..hark]
    =+  taw=wit.arc 
    =+  vad=*(list deed)
    |-  ^-  [p=deed q=_..hark]
    ?:  |(?=(~ wit.arc) (lth wen p.i.wit.arc))
      [(deem (flop vad)) ..hark(wit.arc taw)]
    $(vad [(q.i.wit.arc wen) vad], taw t.taw)
  ::
  ++  have                                          ::  deed by want
    |=  mow=fact  ^-  [p=deed q=_..have]
    =+  vad=*(list deed)
    =+  nod=(~(tap by wan.arc) ~)
    =+  nud=`_nod`~
    |-  ^-  [p=deed q=_..have]
    ?~  nod
      [(deem vad) ..have(wan.arc (~(gas by `_wan.arc`~) nud))]
    =+  ^=  tif  ^-  [p=(unit ,_i.nod) q=(unit deed)]
        =+  lov=&
        =+  wiz=p.q.i.nod
        =+  ^=  kyn
            |-  ^-  [p=? q=_wiz]
            ?~  wiz
              [lov ~]
            =+  zaq=$(wiz t.wiz)
            ?:  ?=(^ q.i.wiz)
              [p.zaq [i.wiz q.zaq]]
            ?:  =(p.mow p.i.wiz)
              [p.zaq [[p.mow ~ q.mow] q.zaq]]
            [| [i.wiz q.zaq]] 
        ?:  p.kyn
          =+  ^=  nyq
              |-  ^-  (list ,[p=path q=bill])
              ?~(q.kyn ~ [[p.i.q.kyn (need q.i.q.kyn)] $(q.kyn t.q.kyn)])
          [~ [~ (q.q.i.nod nyq)]]
        [[~ p.i.nod [q.kyn q.q.i.nod]] ~]
    %=  $
      nod  t.nod
      nud  ?~(p.tif nud [u.p.tif nud])
      vad  ?~(q.tif vad [u.q.tif vad])
    ==
  ::
  ++  hasp                                          ::  deed by step
    |=  [mow=fact cam=lens]  ^-  [p=deed q=_..hasp]
    =+  wap=(flop p.mow)
    ?~  wap  [~ ..hasp]
    =+  vec=(slay i.wap)
    ?.  &(?=(^ vec) ?=([%% %ud *] u.vec))
      [~ ..hasp] 
    =+  syf=(~(tap by hut.arc) ~)
    =+  vad=*(list deed)
    =+  yos=|
    =+  paw=(flop t.wap)
    |-  ^-  [p=deed q=_..hasp]
    ?~  syf
      :-  (deem vad)
      ?.  yos
        ..hasp
      ..hasp(ear.arc (~(put by ear.arc) paw q.p.u.vec))
    ?.  =(q.p.u.vec (trot paw cam))
      $(syf t.syf)
    =+  rel=(quiz paw q.q.i.syf)
    ?~  rel
      $(syf t.syf)
    $(syf t.syf, yos &, vad [(s.q.i.syf q.p.u.vec u.rel q.mow) vad])
  :: 
  ++  hast                                          ::  deed by name
    |=  mow=fact  ^-  deed
    =+  syf=(~(tap by fis.arc) ~)
    =+  vad=*(list deed)
    |-  ^-  deed
    ?~  syf
      (deem vad)
    =+  rel=(quiz p.mow q.q.i.syf)
    ?~  rel
      $(syf t.syf)
    $(syf t.syf, vad [(s.q.i.syf u.rel q.mow) vad])
  ::
  ++  hear
    |=  [mow=fact cam=lens]
    ^-  [p=deed q=_..hear]
    =+  hen=*(list deed)
    =+  hoy=(have mow)
    =>  .(..hear q.hoy, hen [p.hoy hen])
    =+  zir=(hast mow)
    =>  .(hen [(hast mow) hen])
    =+  fym=(hasp mow cam)
    [(deem p.fym hen) q.fym]
  ::
  ++  kick
    |=  [now=date cam=lens tod=deed]
    ^-  [p=(list fact) q=(list gift) r=deed s=_..kick]
    ?-    tod
        ~
      [~ ~ ~ ..kick]
    ::
        [%feed *]  
      =+  yog=(poke:egg now cam p.tod)
      [~ ~ p.yog ..kick(egg q.yog)]
    ::
        [%fish *]       ::  XX: fish the past
      [~ ~ ~ ..kick(fis.arc (~(put by fis.arc) p.tod [& q.tod r.tod s.tod]))]
    ::
        [%give *]
      [~ [p.tod ~] ~ ..kick]
    ::
        [%hunt *]       ::  XX: hunt the past
      [~ ~ ~ ..kick(hut.arc (~(put by hut.arc) p.tod [& q.tod r.tod s.tod]))]
    ::
        [%more *]
      =+  [tiz=*(list fact) fus=*(list gift) yis=*(list deed)]
      |-  ^-  [p=(list fact) q=(list gift) r=deed s=_..kick]
      ?~  p.tod
        [(flop tiz) (flop fus) (deem (flop yis)) ..kick]
      =+  dub=^$(tod i.p.tod)
      %=    $
          p.tod  t.p.tod
          tiz    (weld p.dub tiz)
          fus    (weld q.dub fus)
          yis    [r.dub yis]
          ..kick  s.dub
      ==
    ::
        [%post *]
      =+  byl=[now q.tod]
      =+  doy=(trot p.tod cam)
      =+  gaq=(rent %ud doy)
      =+  yed=(weld p.tod `path`[gaq ~])
      :^    [[yed byl] ~]
          ~
        ~
      ..kick(tar (brag yed [~ byl] tar))
    ::
        [%save *]
      =+  byl=[now q.tod]
      [[[p.tod byl] ~] ~ ~ ..kick(tar (brag p.tod [~ byl] tar))]
    ::
        [%wait *]         ::  XX: already happened?
      =+  ^=  vik
          |-  ^+  wit.arc
          ?:  |(?=(~ wit.arc) (lth q.tod p.i.wit.arc))
            [[q.tod r.tod] wit.arc]
          [i.wit.arc $(wit.arc t.wit.arc)]
      [~ ~ ~ ..kick(wit.arc vik)]
    ::
        [%want *]         ::  XX: already got it?
      =+  ^=  yel  |-  ^-  (list ,[p=path q=(unit bill)])
          ?~(q.tod ~ [[i.q.tod ~] $(q.tod t.q.tod)])
      [~ ~ ~ ..kick(wan.arc (~(put by wan.arc) p.tod [yel r.tod]))]
    ==
  ::
  ++  kiss
    |=  [now=date cam=lens tod=deed]
    =+  [saw=*(list fact) doz=*(list gift)]
    |-  ^-  [p=(list fact) q=(list gift) r=_..kiss]
    ?:  =(~ tod)
      [saw doz ..kiss]
    =+  was=(kick now cam tod)
    $(saw (weld p.was saw), doz (weld q.was doz), tod r.was, ..kiss s.was)
  ::
  ++  know
    |=  [nuw=(list fact) cam=lens]  ^-  [p=deed q=_..know]
    =+  hen=*(list deed)
    |-  ^-  [p=deed q=_..know]
    ?~  nuw
      [(deem hen) ..know]
    =+  yoy=(hear i.nuw cam)
    $(hen [p.yoy hen], ..know q.yoy)
  ::
  ++  init
    |=  now=date
    ^-  [p=deed q=..init]
    =+  vid=(boot:egg now loc)
    =>  .(egg q.vid)
    [p.vid ..init]
  ::
  ++  quiz
    |=  [hap=path qid=quid]  ^-  (unit path)
    =+  ^=  pre
        ?~  p.qid  ~
        =+  col=(flop loc)
        |-  ^-  path
        ?~  col  ~
        ?:  =(0 p.p.qid)
          (flop col)
        $(col t.col, p.p.qid (dec p.p.qid))
    =+  ^=  rel  
        |-  ^-  (unit path)
        ?~  pre  [~ hap]
        ?~  hap  ~
        ?.(=(i.pre i.hap) ~ $(pre t.pre, hap t.hap))
    ?~  rel  ~
    =+  lor=u.rel
    |-  ^-  (unit path)
    ?~  q.qid  rel
    ?~  lor  ~
    ?.  ?:  ?=(@ i.q.qid)
          =(i.hap i.q.qid)
        (i.q.qid i.hap)
      ~
    $(lor t.lor, q.qid t.q.qid)
  ::
  ++  trot                                          ::  first unused index
    |=  [yop=path cam=lens]  ^-  @ud
    =+  yef=(~(get by ear.arc) yop)
    =+  tiv=?~(yef 1 u.yef)
    =+  poy=(flop yop)
    |-  ^-  @ud
    =+  dar=(cam (flop `_poy`[(rent %ud tiv) poy]))
    ?~(o.dar tiv $(tiv +(tiv)))
  --
--
