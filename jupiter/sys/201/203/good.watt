::
::  Generic tiles
::
=>  |%  ++  bill  ?(rock [rock rock])                     ::  dir/indir crypt
        ++  bone  slim                                    ::  key fingerprint
        ++  code  phat                                    ::  symmetric key
        ++  fact  ,[p=path q=note]                        ::  global fact
        ++  home  ,@hH                                    ::  global identity
        ++  lord  ,@ud                                    ::  regime version
        ++  note  ,*                                      ::  key-value value
        ++  path  barn                                    ::  key-value key
        ++  phat  ,@uvI                                   ::  hash vs collision
        ++  rock  ,@uv                                    ::  blind bit data
        ++  slim  ,@uvH                                   ::  hash vs preimage
        ++  will  (list home)                             ::  guardian list
    --
::
::  Specific tiles
::
=>  |%
    ++  card                                          ::  kernel query
      $%  :-  %reg 
          :+  p=home
            q=lord
          r=?(%pub %pri %wil)
      ==
    ++  case                                          ::  per home
      $:  rev=lord                                    ::  regime version
          wil=(list home)                             ::  guardians
          pub=(unit ring)                             ::  public key
          pri=(unit soul)                             ::  private state
      ==
    ++  plan                                          ::  packet sources
      $%  [%bu p=(list plan)]                         ::  packet bundle
          [%da p=path q=note]                         ::  data
          [%pc p=home q=lord r=ring s=will]           ::  certificate
          [%pg p=home q=lord r=bill]                  ::  signed packet
          [%pl p=home q=lord r=bill]                  ::  sealed packet
          [%ps p=home q=lord r=wand]                  ::  private secret
      ==
    ++  rank  ?(%pope %czar %king %duke %user %pawn)  ::  key width class
    ++  soul                                          ::  private state
      $:  wad=wand                                    ::  private key
      ==
    --
::
::  State
::
=+  :*  box=*(map path note)                          ::  foreign facts
        reg=*(map home case)                          ::  regime state
    ==
::
::  Brain
::
|%
++  baal  `@`(shax 'Humongous fungus')                ::  false god
++  bear
  |=  who=home
  ^-  case
  =+  got=(~(get by reg) who)
  ?.  ?=(~ got)
    u.got
  =+  nak=(clan who)
  =+  caz=*case
  ?-  nak
    ?(%pope %czar)        caz(wil [who ~])
    ?(%king %duke %user)  caz(wil [(vice who) ~])
    %pawn                 caz(wil [who ~])
  ==
::
++  blow                                              ::  apply deeds in work
  |=  doy=work  ^+  mind
  ?~  doy
    ..mind
  ?:  ?=(%| -.i.doy)
    $(doy t.doy) 
  $(..mind (p.i.doy mind), doy t.doy)
::
++  bozo                                              ::  make block
  |=  god=phat
  %+  can
    7
  =+  who=0
  |-  ?:  =(256 who)
        ~
      :-  [1 (shaf (drip:ar (zeus `@`who god)))]
      $(who +(who))
::
++  clan
  |=  who=home  ^-  rank
  =+  wid=(met 3 who)
  ?:  =(0 wid)      %pope
  ?:  =(1 wid)      %czar
  ?:  =(2 wid)      %king
  ?:  (gte 4 wid)   %duke
  ?:  (gte 8 wid)   %user
  ?:  (gte 16 wid)  %pawn
  !!
::
++  dawn                                              ::  register wand
  |=  [who=home rev=lord wad=wand]
  ^+  mind
  =-  ..mind(reg (~(put in reg) who zec))
  ^=  zec  ^-  case
  =+  caz=(bear who)
  ?>  =(rev rev.caz)
  ?~  pri.caz
    =+  sol=*soul
    caz(pri [~ sol(wad wad)])
  ?>(=(wad.u.pri.caz wad) caz)
::
++  deed  |+(dum=_mind mind)
++  gift  $%([& p=_deed] [| p=_task])
++  grin                                              ::  register ring
  |=  [who=home rev=lord rig=ring wil=will]
  ^+  mind
  =-  ..mind(reg (~(put in reg) who zec))
  ^=  zec  ^-  case
  =+  caz=(bear who)
  caz(pub [~ rig], wil wil)
::
++  hard
  |*  han=_|+(* *)
  |=  fud=*  ^-  han
  ~|  %hard
  =+  gol=(han fud)
  ?>(=(gol fud) gol)
::
++  know
  |*  ned=card
  ~|  [%know ned]
  ?+    ned  !!
      [%reg *]
    =+  cas=(bear p.ned)
    ?.  =(rev.cas q.ned)
      ?>((lth rev.cas q.ned) ~)
    ?+  r.ned  !!
      %pub  pub.cas
      %pri  ?~(pri.cas ~ [~ u=wad.u.pri.cas])
      %wil   [~ u=wil.cas]
    ==
  ==
::
++  mars
  |=  [who=home dol=slim]  ^-  wand
  (brew:ar 1.024 (add who dol))
::
++  mind  .                                           ::  live brain
++  reap                                              ::  decode packet
  =+  sal=*(set home)                                 ::  multiply signed
  |=  peb=rock  ^-  work
  =+  [mag=(end 3 2 peb) bod=(rsh 3 2 peb)]
  ~|  [%reap mag]
  ?+    mag  !!
  ::
      %bu
    =+  pay=((hard (list rock)) (cue bod))
    |-  ^-  work
    ?~(pay ~ (weld ^$(peb i.pay) $(pay t.pay)))
  ::
      %da
    =+  pay=((hard fact) (cue bod)) 
    =+  con=?>(?=(^ p.pay) (need (slay i.p.pay)))
    ?>  ?&  ?=([%% %h *] con)
            (~(has in sal) q.p.con) 
        ==
    :~  :-  %& 
      |+  dum=_mind  =>  .(..mind dum)
      ?<  (~(has by box) p.pay)
      ..mind(box (~(put by box) p.pay q.pay))
    ==
  ::
      %pc
    =+  pay=((hard ,[p=home q=lord r=ring s=will]) (cue bod))
    =+  yep=[[%& |+(dum=_mind =>(.(..mind dum) (grin pay)))] ~]
    ?:  =(0 q.pay) 
      ?>  =((root p.pay) (shax r.pay))
      yep
    :~  :-  %|
      %+  wait
        [%reg p.pay (dec q.pay) %wil]
      |+  vig=(list home)
      |-  ^-  work
      ?~  vig
        yep
      ?>((~(has in sal) i.vig) $(vig t.vig))
    ==
  ::
      %pg
    =+  pay=((hard ,[p=home q=lord r=bill]) (cue bod))
    :~  :-  %|
      %+  wait
        [%reg p.pay q.pay %pub]
      |+  rig=ring
      %=    ^$
          peb
        ?~  r.pay
          (need (take:ar rig r.pay))
        (need (shed (need (take:ar rig -.r.pay)) +.r.pay))
      ==
    == 
  ::
      %pl
    =+  pay=((hard ,[p=home q=lord r=bill]) (cue bod))
    :~  :-  %|
      %+  wait
        [%reg p.pay q.pay %pri]
      |+  wad=wand
      %=    ^$
          peb
        ?~  r.pay
          (need (chew:ar wad r.pay))
        (need (shed (need (chew:ar wad -.r.pay)) +.r.pay))
      ==
    == 
  ::
      %ps
    =+  pay=((hard ,[p=home q=lord r=wand]) (cue bod))
    =+  yep=[[%& |+(dum=_mind =>(.(..mind dum) (dawn pay)))] ~]
    :~  :-  %|
      %+  wait
        [%reg p.pay p.pay %pub]
      |+  rig=ring
      ?>  =(rig (drip:ar r.pay))
      yep
    ==
  ==
::
++  root                                              ::  root key fingerprint
  |=  who=home
  =+  nak=(rank who)
  ?+  nak  !!
    ?(%pope %czar)  =+(boz=(bozo baal) (cut 7 [who 1] boz))
    %pawn           who
  ==
::
++  spin
  |=  peb=rock  ^+  mind
  =+  wax=(reap peb)
  |-  ^+  mind 
  ?~  wax
    ..mind 
  =>  .(..mind (blow wax))
  =+  woe=(walk wax)
  ?:  =(woe wax)
    ~|(%spin-loop !!)
  $(wax woe)
::
++  task  |+(a=_mind *work)                           ::  XX shouldnt need name
::  ++  then  |=(gun=time ..mind(now gun))
++  vice                                              ::  seigneur
  |=  who=home  ^-  home
  =+  nak=(clan who)
  ?+  nak  !!
    %king  (end 3 1 (add (end 3 1 who) (rsh 3 1 who)))
    %duke  (end 4 1 (add (end 4 1 who) (rsh 4 1 who)))
    %user  (end 5 1 who)
  ==
::
++  wait                                              ::  polling wait
  |*  [ned=card run=_|+(p=* *work)]
  ^+  task
  |+  dum=_mind  ^-  work
  =>  .(..mind dum)
  =+  him=(know ned)
  ?~  him
    [[%| ^|(..$)] ~]
  (run u.him)
::
++  walk                                              ::  apply tasks in work
  |=  doy=work  ^-  work
  ?~  doy
    ~
  ?:  ?=(& -.i.doy)
    $(doy t.doy)
  (weld (p.i.doy ..mind) $(doy t.doy))
::
++  work  (list gift)
++  zeus                                              ::  god to initial czar
  |=  [who=home god=phat]
  ?>  (lte who 255)
  =+  dol=(shaf (add god who))                        ::  idol
  (mars who dol)
--
