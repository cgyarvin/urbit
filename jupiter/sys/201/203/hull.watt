=>  |%
    ++  bowl                                                  ::  cargo
      $_  ^?  
      |%
      ++  boot  [p=*lime q=^?(.)]
      ++  peek  |+(hap=path *(unit))                          ::  inspect
      ++  poke  |+([hov=hive man=*] [p=*lime q=^?(..poke)])   ::  apply
      --
    ++  dome    (map span ,[p=(unit time) q=rail])            ::  queries
    ++  fish  _|+([a=path b=bill] *lime)                      ::  series act
    ++  hunt  _|+([a=@ud b=path c=bill] *lime)                ::  sync act
    ++  lime                                                  ::  fuel
      $|  ~                                                   ::  noop
      $%  [%all p=(list lime)]                                ::  collection
      ::  [%ban p=span]                                       ::  suspend?
          [%dig p=span q=(list path) r=want]                  ::  request
      ::  [%god p=?(%nuke)]                                   ::  reinstall
      ::  [%nab p=span]                                       ::  resume?
          [%nap p=span q=time r=lime]                         ::  await
          [%net p=span q=quip r=fish]                         ::  find
          [%rod p=span q=quip r=hunt]                         ::  sync
          [%run p=*]                                          ::  command
          [%say p=plum]                                       ::  action
      ==
    ++  rail                                                  ::  query
      $%  [%dig p=wing q=want]                                ::  request
          [%nap p=time q=lime]                                ::  await
          [%net p=quip q=fish]                                ::  find
          [%rod p=quip q=sail r=hunt]                         ::  sync
      ==
    ++  sail  (map path ,@ud)                                 ::  sync state
    ++  want  _|+([a=(list ,[p=path q=bill])] *lime)          ::  request effect
    ++  wing  (list ,[p=path q=(unit bill)])                  ::  request state
    ++  worm  ,[p=(list lime) q=(list plum)]                  ::  work
    --
|%
++  hull
  |=  egg=bowl
  ^-  ship
  =+  rof=*dome
  =+  hov=*hive
  =>  |%
      ++  hear
        |=  [baz=(list lime) vac=(list fact)]
        ^-  [p=(list lime) q=_..hear]
        =-  [p.rew ..hear(rof q.rew)]
        ^=  rew
        |-  ^-  [p=(list lime) q=dome]
        ?~  rof
          [baz rof]
        =+  yem=$(rof l.rof)
        =+  noy=$(rof r.rof, baz p.yem)
        =>  ^+(. .(baz p.noy, l.rof q.yem, r.rof q.noy))
        ?.  ?=(~ p.q.n.rof)
          [baz rof]
        =+  sey=(lash q.q.n.rof vac baz)
        [p.sey rof(q.n q.sey)]
      ::
      ++  kick
        |=  gas=(list lime)
        =+  baw=*worm
        |-  ^-  [p=(list plum) q=_..kick]
        ?~  gas
          ?~  p.baw
            [(flop q.baw) ..kick]
          $(p.baw ~, gas (flop p.baw))
        =+  fel=(kill i.gas baw)
        $(gas t.gas, baw p.fel, ..kick q.fel)
      ::
      ++  kill
        |=  [lym=lime baw=worm]
        ~|  %kill
        ^-  [p=worm q=_..kill] 
        ?-    lym 
            ~         [baw ..kill]
        ::
            [%all *]  
          |-  ^-  [p=worm q=_..kill]
          ?~  p.lym
            [baw ..kill]
          =+  fel=^$(lym i.p.lym)
          $(p.lym t.p.lym, baw p.fel, ..kill q.fel)
        ::
            [%dig *]
          =+  ^=  mox
              |-  ^-  [p=? q=(list ,[p=path q=(unit bill)])]
              ?~  q.lym  [& ~]
              =+  mox=$(q.lym t.q.lym)
              =+  wal=(pray:r.hov i.q.lym)
              [&(!=(~ wal) p.mox) [[i.q.lym wal] q.mox]]
          ?:  p.mox
            :-  :-  :-  %-  r.lym
                        %+  turn
                          q.mox
                        |=(a=[p=path q=(unit bill)] [p.a (need q.a)])
                    p.baw
                q.baw
            ..kill
          [baw ..kill(rof (~(put by rof) p.lym [~ [%dig q.mox r.lym]]))]
        ::
            [%nap *]
          ?:  (gte p.hov q.lym)
            [[[r.lym p.baw] q.baw] ..kill]
          [baw ..kill(rof (~(put by rof) p.lym [~ [%nap q.lym r.lym]]))]
        ::
            [%net *]
          ~|  %kill-rod
          ?>  =(~ (~(get by rof) p.lym))
          =+  wuh=(hope:r.hov q.lym)
          |-  ^-  [p=worm q=_..kill]
          ?~  wuh
            [baw ..kill(rof (~(put by rof) p.lym [~ [%net q.lym r.lym]]))]
          $(wuh t.wuh, p.baw [(r.lym i.wuh) p.baw])
        ::
            [%rod *]
          ~|  %kill-rod
          ?>  =(~ (~(get by rof) p.lym))
          =+  hur=`(list case)`(wish:r.hov q.lym)
          =+  [syl=*sail lax=0]
          |-  ^-  [p=worm q=_..kill]
          ?~  hur
            [baw ..kill(rof (~(put by rof) p.lym [~ [%rod q.lym syl r.lym]]))]
          =+  ^=  zey
              =+  zey=[p=1 q=p.baw]
              |-  ^+  zey
              ?~  q.i.hur  zey
              ?>  =(p.zey p.i.q.i.hur)
              %=  $
                q.i.hur  t.q.i.hur
                p.zey    +(p.zey)
                q.zey    [(r.lym p.zey p.i.hur q.i.q.i.hur) q.zey]
              ==
          $(hur t.hur, p.baw q.zey, syl (~(put by syl) p.i.hur p.zey))
        ::
            [%run *]
          =+  leb=(poke:egg hov p.lym)
          [[[p.leb p.baw] q.baw] ..kill(egg q.leb)]
        ::
            [%say *]  [[p.baw [p.lym q.baw]] ..kill]
        ==
      ++  kiss
        |=  [hap=fact peq=quip]  ^-  ?
        ?&  |(?=(~ p.p.peq) (gte p.q.hap u.p.p.peq))
            |(?=(~ q.p.peq) (lte p.q.hap u.q.p.peq))
            |-  ^-  ?
            ?~  q.peq
              &
            ?~  p.hap
              |
            ?&  ?@(i.q.peq =(i.q.peq i.p.hap) (i.q.peq i.p.hap))
                $(q.peq t.q.peq, p.hap t.p.hap)
            ==
        ==
      ++  lash
        |=  [tec=rail vac=(list fact) baz=(list lime)]
        ^-  [p=(list lime) q=[p=(unit time) q=rail]]
        ?-    tec
            [%dig *]
          =-  ?.  p.mig
                [baz ~ tec(p q.mig)]
              :+  :-  %-  q.tec
                      (turn p.mig |=(a=[p=path q=(unit bill)] [p.a (need q.a)]))
                  baz
                [~ p.hov]
              tec(p q.mig)
          ^=  mig  ^-  [p=? q=wing]
          |-  ^-  [p=? q=wing]
          ?~  p.tec
            [& ~]
          =+  gel=$(p.tec t.p.tec)
          =-  [&(p.gel ?=(^ q.eyl)) [eyl q.gel]]
          ^=  eyl  ^-  [p=path q=(unit bill)]
          ?.  ?=(~ q.i.p.tec)
            i.p.tec
          |-  ^-  [p=path q=(unit bill)]
          ?~  vac
            i.p.tec
          ?.(=(p.i.p.tec p.i.vac) $(vac t.vac) [p.i.vac [~ q.i.vac]])
        ::
            [%nap *]
          ?.  (gte p.hov p.tec)
            [baz ~ tec]
          [[q.tec baz] [~ p.hov] tec]
        ::
            [%net *]
          :+  |-  ^-  (list lime)
              ?~  vac
                baz
              $(vac t.vac, baz ?.((kiss i.vac p.tec) baz [(q.tec i.vac) baz]))
            ~
          tec
        ::
            [%rod *]
          =-  [q.woy ~ tec(q p.woy)]
          ^=  woy  
          |-  ^-  [p=sail q=(list lime)]
          ?~  vac
            [*sail baz]
          =+  ter=$(vac t.vac)
          =+  zav=(cork p.i.vac)
          ?:  |(?=(~ zav) !(kiss [q.u.zav q.i.vac] p.tec))
            ter
          =+  rey=(~(get by q.tec) q.u.zav)
          =+  bem=?~(rey 1 +(u.rey))
          ?.  =(bem p.u.zav)
            ter
          =>  ^+(. .(baz [(r.tec bem q.u.zav q.i.vac) baz]))
          =-  [(~(put by q.tec) q.u.zav p.fyq) q.fyq]
          ^=  fyq
          |-  ^-  [p=@ud q=(list lime)] 
          =+  pey=(pray:r.hov (flop [(rent %ud +(bem)) (flop q.u.zav)]))
          ?~  pey
            [bem baz]
          $(bem +(bem), baz [(r.tec +(bem) q.u.zav u.pey) baz])
        ==
      --
  |%  
  ++  film  |=(hap=path (peek:egg hap))
  ++  step  |=  [hav=hive poc=pork]
            =>  ^+(. .(hov hav))
            ^-  [p=(list plum) q=_..step]
            =+  ^=  hez  ^-  [p=(list lime) q=(list fact)]
                ?-  poc
                  ~        [~ ~]
                  [%do *]  [[[%run p.poc] ~] ~]
                  [%nu *]  [~ [p.poc ~]]
                ==
            =+  lim=(hear p.hez q.hez)
            =>  ^+(. .(..hear q.lim))
            =+  myt=(kick (flop p.lim))
            [(flop p.myt) ..step(..kick q.myt)]
  --
--

