~%    %gunn
    -<-<
  ==
    %bind  bind
    %cue   cue
    %draw  draw
    %jam   jam
    %hunt  hunt
    %pour  pour
    %ride  ride
    %scan  scan
    %slam  slam
    %sell  sell
    %soul  soul
    %slot  slot
    %swan  swan
    %swat  swat
    %swig  swig
    %swim  swim
    %wash  wash
    %whip  whip
  ==
=>  !% 
=>  &.
    ++  deed                              ::  command-line action
      $~  p=(vent)                        ::  data destination
          q=(fuel)                        ::  data source
          r=(tool)                        ::  data transformation
      ==
    ++  fuel                              ::  data source
      $&  ~                               ::  null
        [%chew p=*gene q=((list fuel))]   ::  construct and filter
        [%data p=(mode) q=*]              ::  data as produced
        [%disk p=(mine)]                  ::  read from filesystem
        [%gene p=*gene]                   ::  direct gene
        [%many p=((list fuel))]           ::  many
        [%name p=*term q=(fuel)]          ::  named
      ==
    ++  func                              ::  transformation function
      $^  [%body p=*gene]                 ::  unwrapped code
          [%data p=@]                     ::  data of mode %watt
          [%disk p=(path)]                ::  %fund path
      ==
    ++  lard                              ::  library definition
      $^  [%data p=@]                     ::  data of mode %watt
          [%disk p=(path)]                ::  %libd path
      ==
    ++  mine                              ::  filesystem mapping
      $~  p=(mode)                        ::  noun conversion
          q=(snot)                        ::  search model 
          r=(path)                        ::  unix path
      ==
    ++  mode
      $&  %*  $*  %atom                   ::  file as flat atom
                  %auto                   ::  default
                  %blob                   ::  file as byte length, atom
                  %pile                   ::  file as noun jam
                  %text                   ::  file as list of list of chars
                  %watt                   ::  watt source as atom
              ==
        [%dlog p=(mode)]                  ::  directory as list of files
        [%dmap p=(mode)]                  ::  directory as list of name, file
      ==
    ++  path  (list tape)                 ::  unix path
    ++  shoe                              ::  trace stack layer
      $^  [%bean *]                       ::  raw noun
          [%lose *term]                   ::  error message
          [%mean |.(*tank)]               ::  prettyprint trigger
          [%spot *spot]                   ::  source position
      ==
    ++  shot                              ::  profile sample
      $~  p=@                             ::  number of samples
          ^=  q                           ::  subsamples
          %*  %-  list
              $~  p=(term)
                  q=`*shot`[@ ~]
              ==
      ==
    ++  slab                              ::  complete execution record
      $~  p=((list shoe))                 ::  stack trace
          q=*(map term num)               ::  event counter
          r=(shot)                        ::  profile samples
      ==
    ++  snot                              ::  filesystem search model
      $*  %actd                           ::  action directory
          %boot                           ::  internal boot directory
          %curd                           ::  current directory
          %fund                           ::  function directory
          %home                           ::  home directory
          %jetd                           ::  jet directory
          %libd                           ::  library directory
          %netd                           ::  network input directory
          %outd                           ::  output log directory
          %resd                           ::  resource directory
          %root                           ::  root path
      ==
    ++  tool                              ::  transformation
      $~  p=((list lard))                 ::  libraries
          q=(func)                        ::  function
      ==
    ++  vent
      $&  *term                           ::  print to screen with label
        [%bind p=*term]                   ::  add to environment
        [%many p=((list vent))]           ::  tuple
        [%save p=(mine)]                  ::  write to filesystem
      ==
    --
=>  &.
    ++  x-path  ~+
      (most (just '/') (star ;~(pose aln cab dot hip)))
    ::
    ++  x-fuel
      %+  knee  *fuel  |.  ~+
      ;~  pose
        %+  ifix  
          [gal gap]
        ;~  pose
          (stag %gene wide:vast)
          ::  (stag %comd ;~(pfix bar qut))
          (stag %disk x-mine)
          (stag %many (ifix [sel ser] (most ace x-fuel)))
          (stag %name ;~(plug sym ;~(pfix tis x-fuel)))
        ==
        (easy ~) 
      ==
    ::
    ++  x-mode
      %+  knee  *mode  |.  ~+
      ;~  pose
        ;~  sfix  
          ;~  pose
            (cold %atom (just 'a'))
            (cold %blob (just 'b'))
            (stag %dlog ;~(pfix (just 'l') x-mode))
            (stag %dmap ;~(pfix (just 'm') x-mode))
            (cold %pile (just 'p'))
            (cold %text (just 't'))
            (cold %watt (just 'w'))
          ==
          hes
        ==
        (easy %auto)
      ==
    ::
    ++  x-mine  ~+
      ;~  plug
        x-mode
        ;~  pose
          (cold %root fas)
          (cold %home ;~(plug dot fas))
          %+  ifix
            [sig fas]
          ;~  pose
            (cold %fund (just 'f'))
            (cold %libd (just 'l'))
            (cold %resd (just 'r'))
          ==
        ==
        x-path
      ==
    ::
    ++  x-deed  ~+
      ;~(plug x-vent x-fuel x-tool)
    ::
    ++  x-tool  ~+
      ;~  pose
        ;~  plug
          (star (stag %disk ;~(pfix bar x-path)))
          ;~  pose
            (stag %disk ;~(pfix col x-path))
            (stag %body ;~(pfix lus wide:vast))
          ==
        ==
        ;~  plug
          (easy ~)
          (stag %body wide:vast)
        ==
      ==
    ::
    ++  x-vent
      %+  knee  *vent  |.  ~+
      ;~  pose
        %+  ifix  
          [gar gap]
        ;~  pose
          (stag %save x-mine)
          (stag %bind ;~(pfix tis sym))
          ::  (stag %comd ;~(pfix bar qut))
          (stag %many (ifix [sel ser] (most ace x-vent)))
          (cold %% sig)
        ==
        (easy %%)
      ==
    --
=+  env=seed
&.
::
++  bind                                                ::  set a variable
  |=  [nam=*term vax=*vase]  ~|  %bind  ^-  ..bind
  ..bind(env [[%cell p.env [%face nam p.vax]] [q.env q.vax]])
::
++  draw                                                ::  mold from mode
  |=  med=*mode  ~|  %draw  ^-  *gene
  ?-    med
      %auto
    ~|(%draw-auto !!)
  ::
      *{%atom %watt}
    [%hssg [[%smts %atom] ~] ~]
  ::
      %blob
    [%hssg [[%ktts %l [%smts %atom]] [%ktts %d [%smts %atom]] ~] ~]
  ::
      [%dlog *]
    [%cncl %list $(med p.med)]
  ::
      [%dmap *]
    [%cncl %list [%hssg [[%ktts %n %tape] [%ktts %v $(med p.med)] ~] ~]]
  ::
      %pile
    [%hssg [[%smts %noun] ~] ~]
  ::
      %text
    %wall
  ==
::
++  hunt                                                ::  flatten path
  |=  [med=*mode pat=*path]  ~|  %hunt
  ~~  (show %q [med pat])
  ^-  [p=*mode q=*tape]
  ?~  pat
    !!
  ?~  t.pat
    =+  vel=i.pat
    =+  qoy=*tape
    |-  ^-  [p=*mode q=*tape]
    ?~  vel
      [med (flop qoy)]
    ?:  .=('.' i.vel)
      =+  loq=(rap 3 t.vel) 
      :-  ?-    loq
              *{%dlog %dmap}  
            ?:(.=(%auto med) (mode [loq %auto]) ?>(.=(-.med loq) med))
          ::
              *  ?:(.=(%auto med) (mode loq) ?>(.=(med loq) med))
          ==
      (flop qoy)
    $(vel t.vel, qoy [i.vel qoy])
  =+  yex=$(pat t.pat)
  [p.yex (weld i.pat ^-(*tape ['/' q.yex]))]
:: 
++  pour                                                ::  gene in env
  |=  gen=*gene  ~|  %pour  ^-  *vase
  =+  gun=(~(mint ut p.env) %noun gen)
  [p.gun .*(q.env q.gun)]
::
++  ride                                                ::  execute deed
  |=  [tul=*tool ful=*fuel]  ~|  %ride  ^-  *vase
  =+  ^=  gul  |-  ^-  *vase
      ?-    ful
          ~
        [[%atom %n] ~]
      ::
          [%chew *]
        (slam (pour p.ful) $(ful [%many q.ful]))
      ::
          [%data *]
        =+  typ=p:(pour (draw p.ful))
        ?.  (~(firm ut typ) q.ful)
          ~|(%ride-data !!)
        [typ q.ful]
      ::
          [%disk *]
        ~|(%fuel-disk !!)
      ::
          [%gene *]
        (pour p.ful)
      ::
          [%many *]
        |-  ^-  *vase
        ?-    p.ful 
            ~      !!
            [* ~]  $$(ful i.p.ful)
            ^      
          =+  [tug=$(p.ful t.p.ful) nob=$$(ful i.p.ful)]
          [[%cell p.tug p.nob] [q.tug q.nob]]
        ==
      ::
          [%name *]
        =+  pan=$(ful q.ful)
        [[%face p.ful p.pan] q.pan]
      ==
  =+  ^=  hyn  |-  ^-  *vase
      ?~  p.tul
        env
      %=  $
        p.tul  t.p.tul
        env    (pour ?>(?=([%data *] i.p.tul) (rash p.i.p.tul vest)))
      ==
  ?-    q.tul
      [%body *]
    =+  pay=[p=[%cell p.hyn p.gul] q=[q.hyn q.gul]]
    =+  ^=  typ  ^-  *type
        =+  dab=(~(put by *(map term foot)) %% [& & p.q.tul])
        [%core p.pay [%gold p.pay [~ dab]]]
    =+  ~|(%ride-mint cor=[q.pay q:(~(mint ut typ) %noun p.q.tul)])
    =+  gun=(~(mint ut typ) %noun %%)
    ~|  %ride-nock
    [p.gun .*(cor q.gun)]
  ::
      [%disk *]
    ~|(%tool-disk !!)
  ::
      [%data *]
    (slam (pour(env hyn) (rash p.q.tul vest)) gul)
  ==
::
++  scan                                                ::  parse a command
  |=  cad=''  ~|  %scan  ^-  *deed
  (rash cad x-deed)
::
++  sell                                                ::  render a value
  |=  vax=*vase  ~|  %sell  ^-  *tank
  (~(deal ut p.vax) q.vax)
::                                                
++  soul                                                ::  render a type
  |=  typ=*type  ~|  %sell  ^-  *tank
  ~(duck ut typ)
::
++  slot                                                ::  vase division
  |=  [axe=*axis vax=*vase]  ~|  %slot  ^-  *vase
  (pour(env vax) [~ axe])
::
++  swan
  |=  yos=*shoe
  ?-  -.yos
    %bean  (show %q +.yos)
    %lose  (show %t +.yos)
    %mean  $:+.yos
    %spot  (show %o +.yos)
  == 
::
++  swat                                                ::  show trace stack
  |=  wem=*(list shoe)  ~|  %swat  ^-  *tank
  :+  %rose
    [[' ' ~] ['[' ~] [']' ~]]
  (flop (turn wem |=(yos=*shoe (swan yos))))
::
++  swig                                                ::  show event counts
  |=  hoy=*(map term num)  ~|  %swig  ^-  *tank
  ~|  [%swig-hoy hoy]
  :+  %rose
    [[' ' ~] ['{' ~] ['}' ~]]
  %+  turn
    (sort (~(tap by hoy) ~) |=([p=* q=*] (aor -.p -.q)))
  |=([p=*term q=@] (show [%c p] [%d q]))
::
++  swim                                                ::  show run samples
  |=  toq=*shot  ~|  %swim  ^-  *tank
  :+  %rose
    [[' ' ~] ['<' ~] ['>' ~]]
  :-  (show %d p.toq)
  %+  turn
    q.toq
  |=  [p=*term q=*shot]
  :+  %palm
    [['.' ~] ['-' ~] ~ ~]
  [[%leaf (mesc (trip p))] $$(toq q) ~]
::
++  wash                                                ::  print tank
  |=  [[tab=0 edg=80] tac=*tank]  ~|  %wash  ^-  *wall
  (~(win re tac) tab edg) 
::
++  whip                                                ::  label tank
  |=  [lab=*term tac=*tank]  ~|  %whip  ^-  *tank
  ?:  =(%% lab)
    tac
  :+  %palm
    [['.' ~] ['+' ~] ~ ~]
  [[%leaf (mesc (trip lab))] tac ~]
--
