!:
::          zuse (zus), packet interpreter.   This file is in the public domain.
::
:-  %zus
^-  dock
|=  [now=time wha=@ta]
%^    hull
    (iris now)
  wha
^-  bead
|=  [now=time wha=@ta]
:-  ^-  lime
    :~  %all
      :^    %rod                                ::  /hose/rock/[@ud]/
          %abel
        [[~ ~] /hose/rock/ |=(* [~ ~])]
      ^-  hunt
      |=  [seq=@ud muz=* cax=bill]
      [%run %rock cax]
    ::
      :^    %net                                ::  /[@tas]/to/zuse/ut/[@ta]/
          %boaz
        :+  [~ ~]
          ~
        |=  hap=*  ^-  (unit)
        ?.  ?=([p=@tas %to %zuse %ut q=@ta ~] hap)
          ~
        [~ p.hap (need (clan %uw q.hap))]
      ^-  fish
      |=  [yon=path muz=* cax=bill] 
      [%run %want muz q.cax]
    ==
^-  bowl
=>  ..$
=<  |%
    ++  peek  |=([cam=lens hap=path] ~)
    ++  poke  
      |=  [cam=lens man=*] 
      =+  mun=((soft move) man)
      ?~  mun
        [~ ..poke] 
      =+  guo=(love cam u.mun)
      [p.guo ..poke(sys q.guo)]
    --
=>  |%
    ++  game
      $:  wiz=@da                                       ::  next wakeup time
          sal=@                                         ::  entropy
          ton=town                                      ::  urbit state
          pal=(map base flow)                           ::  routing state
          feq=(map hand ,[p=@da q=sock])                ::  key labels
          yaw=(map flap sink)                           ::  fragment pyramid
      ==
    ++  move                                            ::  state change
      $%  [%back p=?(0 1 2 3 4 5) q=flap]               ::  ack or nack
          [%frog p=flap q=rock]                         ::  fragment received
          [%junk p=@]                                   ::  entropy
          [%made p=sock q=lane]                         ::  got route
          [%meet p=sock]                                ::  get route
          [%newt p=flap q=hair]                         ::  fragment decoded
          [%send p=lane q=lane r=rock]                  ::  dispatch a packet
          [%ride p=base q=mace r=will]                  ::  take ownership
          [%pack p=lane q=lane r=rock]                  ::  accept a packet
          [%wise p=sock q=bond]                         ::  accept a statement
          [%note p=sock q=bath r=bond]                  ::  hi-level statement
          [%mess p=skin q=gram]                         ::  mid-level receive
          [%give p=lane q=bath r=skin s=gram]           ::  mid-level send
          [%over p=? q=bath]                            ::  &=succeed |=fail
          [%muss p=well q=hair]                         ::  resolve a message
          [%wake p=@da]                                 ::  time has passed
      ==
    --
=+  sys=*game
|%
++  hate
  |=  [cam=lens man=move]
  ^-  [p=(list move) q=(list lime) r=game]
  !!
::
++  love
  |=  [cam=lens man=move]
  ^-  [p=lime q=game]
  =+  coy=`(list lime)`~
  =+  waz=`(list move)`[man ~]
  |-  ^-  [p=lime q=game]
  ?~  waz
    [[%all (flop coy)] sys]
  =+  haz=(hate cam i.waz)
  $(waz p.haz, coy (weld (flop q.haz) coy), sys r.haz)
--
