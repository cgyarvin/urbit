!:
::          %car, revision control.   This file is in the public domain.
::
:-  %car
=>  |%
    ++  arch                                      ::  fs node
      $%  [& clod]                                ::  ie, file
          [| dirt]                                ::  ie, directory
      ==                                          ::
    ++  clod  ,[p=@da q=@uvI r=*]                 ::  mtime hash content
    ++  dirt  ,[p=@da q=(map ,@ta arch)]          ::  mtime tree
    ++  nope  ^~(^-(arch [%| @ ~]))               ::  empty node
    ++  meta                                      ::  path metadata
      $%  [& p=@da q=@uvI]                        ::  mtime hash
          [| p=@da q=(list ,@ta)]                 ::  mtime dir
      ==                                          ::
    ++  ukaz                                      ::  change (plural ukazy)
      $:  p=path                                  ::  change site
          ^=  q                                   ::  change content
          $%  [%del p=@uvI]                       ::  delete old-hash
              [%set p=@uvI q=@uvI r=*]            ::  new-hash old-hash data
          ==                                      ::
      ==                                          ::
    ++  umaz  ,[p=(list ukaz) q=(list ukaz)]      ::  dual change
    ++  uwed  |=  [a=umaz b=umaz]  ^-  umaz       ::  weld dual change
              [(weld p.a p.b) (weld q.a q.b)]     ::
    ++  uzag  |=(a=umaz ^-(umaz [q.a p.a]))       ::  reverse dual change
    --
=>  |%
    ++  desk                                      ::  project state
      $:  seq=@                                   ::  seqno, from 1
          wen=time                                ::  date of change
          rad=arch                                ::  state now
      ==
    ++  game  
      $:  wod=(map ,@p room)                      ::  complete state
      ==
    ++  move
      $%  [& p=@p q=@tas r=time s=task]           ::  project action
          [| p=@p q=?]                            ::  local on/off
      ==
    ++  room
      $:  our=?                                   ::  local/foreign
          dos=(map ,@ta desk)                     ::  projects 
      ==
    ++  task                                      ::  action
      $%  [%do p=(list ukaz)]                     ::  edit tree
          [%re p=@tas]                            ::  release to label
      ::  [%ti p=arch]                            ::  learn foreign release
      ==
    --
=>  |%
    ++  cy
      =+  car=*arch
      |%  
      ++  also                                        ::  metadata
        |=  pax=path  ^-  meta
        =>  .(car (sift pax))
        ?-  -.car
          &  [%& p.car q.car]
          |  [%| p.car (turn (~(tap by q.car) ~) |=([p=@ta *] p))]
        ==
      ::
      ++  duel                                        ::  compute changes
        |=  bus=arch  
        =+  ram=*hapt
        =+  maz=*umaz
        |-  ^-  umaz
        ?:  =(car bus)
          maz
        =+  pax=(flop ram)
        ?:  ?=(& -.car)
          ?.  ?=(& -.bus)  
            (uzag $(maz (uzag maz), bus car, car bus))
          ?:  =(q.car q.bus)
            maz
          ?:  (gth p.car p.bus)
            [p.maz [[pax %set q.car q.bus r.car] q.maz]]
          [[[pax %set q.bus q.car r.bus] p.maz] q.maz]
        ?.  ?=(| -.bus)
          ?:  (gth p.car p.bus)
            =>  .(maz $(bus nope))
            [p.maz [[pax %del q.bus] q.maz]]
          :-  =+  wob=[[pax %set q.bus @ r.bus] p.maz]
              ?:(=(nope car) wob [[pax %del @] wob])
          q.maz
        =+  lay=(gth p.car p.bus)
        =+  ryc=(~(tap by q.car) ~)
        =+  seb=(~(tap by q.bus) ~)
        =+  noy=(skip ryc |=([p=@ta q=arch] (~(has by q.bus) p)))
        =+  syr=(skip seb |=([p=@ta q=arch] (~(has by q.car) p)))
        =+  yel=(skim ryc |=([p=@ta q=arch] (~(has by q.bus) p)))
        =>  %=    .
                maz
              |-  ^-  umaz
              ?~  yel
                maz
              %=  $
                yel  t.yel 
                maz  %=  ^$
                       ram  [p.i.yel ram]
                       car  q.i.yel
                       bus  (need (~(get by q.bus) p.i.yel))
                     ==
              ==
            ==
        =>  %=    .
                maz
              |-  ^-  umaz
              ?~  noy
                maz
              %=  $
                noy  t.noy
                maz  %=  ^$
                         ram  [p.i.noy ram]
                         car  q.i.noy
                         bus  [%| ?:(lay @ p.bus) ~]
                     ==
              ==
            ==
        |-  ^-  umaz
        ?~  syr
          maz
        %=  $
          syr  t.syr
          maz  %=  ^$
                   ram  [p.i.syr ram]
                   car  [%| ?.(lay @ p.car) ~]
                   bus  q.i.syr
               ==
        ==
      ::
      ++  sift                                         ::  select subtree
        |=  pax=path
        ^-  arch
        ?~  pax
          car
        ?-    car
            [& *]  nope
            [| *]  
          =+  gos=(~(get by q.car) i.pax) 
          ?~(gos nope $(pax t.pax, car u.gos))
        ==
      ::
      ++  wane                                         ::  apply ukaz
        |=  [now=@da kuz=ukaz]
        ^-  arch
        ?~  p.kuz
          =+  hux=?:(?=(& -.car) q.car 0)
          ?-  -.q.kuz
            %del  ?>(=(hux p.q.kuz) nope)
            %set  ?>(=(hux q.q.kuz) [%& now p.q.kuz r.q.kuz])
          ==
        ?>  ?=(| -.car)
        =+  yit=(~(get by q.car) i.p.kuz)
        =+  dan=$(p.kuz t.p.kuz, car ?~(yit nope u.yit))
        ?:  =(nope dan)
          ?~  yit 
            car 
          =+(hon=(~(del by q.car) i.p.kuz) ?~(hon nope [%| now hon]))
        ?~  yit 
          [%| now [[i.p.kuz dan] ~ ~]] 
        ?:  =(dan u.yit)
          car
        =+(hon=(~(put by q.car) i.p.kuz dan) [%| now hon])
      ::
      ++  work                                         ::  apply ukazy
        |=  [now=@da kuz=(list ukaz)]
        ^-  arch
        ?~(kuz car $(car (wane now i.kuz), kuz t.kuz))
      --
    --
|=  [now=time wha=@ta]
%^    hull
    (iris now)
  wha
^-  bead
|=  [now=time wha=@ta]
:-  ^-  lime
    :-  %all
    :~  :^    %rod
            %abel
          :-  [~ ~]
          :-  [wha ~]
          |=  hap=*  ^-  (unit)
          ?.  ?=([p=@ta q=@ta ~] hap)
            ~
          =+  [rux=(slay p.hap) vys=(slay q.hap)]
          ?.  &(?=([~ %% %p *] rux) ?=([~ %% %tas *] vys))
            ~
          [~ q.p.u.rux q.p.u.vys]
        ^-  hunt
        |=  [seq=@ud muz=* cax=bill]  ^-  lime
        ?>  ?=([p=@p q=@ta] muz)
        [%run [%& p.muz q.muz p.cax q.cax]]
    ::  
        :^    %rod
            %boaz
          :-  [~ ~]
          :-  [wha ~]
          |=  hap=*  ^-  (unit)
          ?.  ?=([p=@ta ~] hap)
            ~
          =+  rux=(slay p.hap)
          ?.(?=([~ %% %p *] rux) ~ [~ q.p.u.rux])
        ^-  hunt
        |=  [seq=@ud muz=* cax=bill]  ^-  lime
        ?>  ?=(@p muz)
        [%run [%| muz q.cax]]
    ==
^-  bowl
=>  ..$
=+  sys=*game
|%
++  peek  
  |=  [cam=lens hap=path]
  ^-  (unit)
  ?~  hap  ~
  =+  hos=(slay i.hap)
  ?.  &(?=(^ hos) ?=([%% %p *] u.hos))  ~
  ?~  t.hap  ~
  =+  poj=(slay i.t.hap)
  ?.  &(?=(^ poj) ?=([%% %tas *] u.poj))  ~
  ?~  t.t.hap  ~
  =+  mag=(slay i.t.t.hap)
  ?.  &(?=(^ mag) ?=([%% %da *] u.mag))  ~
  =+  yar=(~(get by wod.sys) q.p.u.hos)
  ?~  yar  ~
  =+  siq=(~(get by dos.u.yar) q.p.u.poj)
  ?~  siq  ~
  ?.  ?:  our.u.yar
        (gte q.p.u.mag wen.u.siq)
      =(q.p.u.mag wen.u.siq)
    ~
  ?~  t.t.t.hap  ~
  ?+  i.t.t.t.hap  ~
    %a  [~ rad.u.siq]
    %d  =+  der=(~(sift cy rad.u.siq) t.t.t.t.hap)
        ?.(?=(& -.der) ~ [~ r.der])
    %m  =+  out=[~ (~(also cy rad.u.siq) t.t.t.t.hap)]
        ~&  [%meta %hap `path`hap]
        ~&  [%meta %tttthap t.t.t.t.hap]
        ~&  [%meta %out out]
        ~&  [%meta %rad rad.u.siq]
        out
    %x  ?.(=(q.p.u.mag when:cam) ~ [~ seq.u.siq wen.u.siq])
  ==
++  poke  
  |=  [cam=lens man=*] 
  ^-  [p=lime q=bowl]
  =+  muv=(move man)
  ?.  =(muv man)
    [~ ..poke]
  ?-    muv
      [| *]
    :-  ~
    =+  lag=(~(get by wod.sys) p.muv)
    %=    ..poke
        wod.sys
      (~(put by wod.sys) p.muv [q.muv ?~(lag ~ dos.u.lag)])
    ==
  ::
      [& *]
    =+  lag=(~(get by wod.sys) p.muv)
    =+  tes=`room`?~(lag [| ~] u.lag)
    =+  lix=(~(get by dos.tes) q.muv)
    =+  taq=`desk`?~(lix [1 `@da`0 [%| `@da`0 ~]] u.lix)
    =-  :-  p.niz
        %=    ..poke
            wod.sys
          %+  ~(put by wod.sys)
            p.muv
          tes(dos (~(put by dos.tes) q.muv q.niz))
        ==
    ^=  niz  ^-  [p=lime q=desk]
    =-  [p.wux [+(seq.taq) ?>((gth r.muv wen.taq) r.muv) q.wux]]
    ^=  wux  ^-  [p=lime q=arch]
    ?-  s.muv
      [%do *]  [~ (~(work cy rad.taq) r.muv p.s.muv)]
      [%re *]  !!
    ==
  ==
--
