!:
::          %reck layer 3.  This file is in the public domain.
::
=>  ::
  ::::          Tier Sm, system mechanics
  ::
  =+  ^=  daq                                       ::  deck - fact storage
      =+  [ear=*(map path ,@) rig=*brig]
      |%
      ++  mine                                      ::  series query
        |=  [wid=quid qey=quay]                      
        ^-  (list cash)
        (slit wid (~(hank ra rig) qey))
      ::
      ++  plow                                      ::  sequence query
        |=  [wid=quid qey=quay]
        ^-  (list case)
        (turn (~(honk ra rig) qey) |=(a=case [p.a q.a (hesh wid r.a)]))
      ::
      ++  pile                                      ::  extend
        |=  [now=time lap=path val=*]
        ^-  [p=@ud q=_..pile]
        =+  laz=(~(get by ear) lap)
        =+  dar=?~(laz 1 u.laz)
        =+  vuz=(flop `path`[~(rent co [~ %ud dar]) (flop lap)])
        ~&  [%got `path`vuz]
        :-  dar
        =>  .(rig (~(clot ra rig) vuz [~ now val]))
        =+  wys=(~(chit ra rig) lap)
        =+  suz=+(dar)
        |-  ^+  ..pile
        ?:  !(~(has by v.wys) ~(rent co [~ %ud suz]))
          ..pile(ear (~(put by ear) lap suz))
        $(suz +(suz))
      ::
      ++  putt                                      ::  define
        |=  [now=time lap=path val=*]
        ^+  ..putt
        =+  yop=(cork lap)
        ?:  ?&  ?=(^ yop)
                =+(gef=(~(get by ear) q.u.yop) =(?~(gef 1 u.gef) p.u.yop))
            ==
          q:(pile now q.u.yop val)
        ~&  [%got `path`lap]
        ..putt(rig (~(clot ra rig) lap [~ now val]))
      --
  =+  pod=*(list ,[p=term q=ship])
  |%
  ++  boot
    |=  [now=time dyr=(list ,[p=term q=dock])]
    ^-  [p=(list kiwi) q=_..boot]
    =+  ^=  paz  
        |-  ^-  [p=(list ,[p=term q=plum]) q=(list ,[p=term q=ship])]
        ?~  dyr
          [~ ~]
        =+  paz=$(dyr t.dyr)
        =+  yof=`[p=(list plum) q=ship]`(q.i.dyr now p.i.dyr)
        :-  (weld (turn p.yof |=(a=plum [p.i.dyr a])) p.paz)
        [[p.i.dyr q.yof] q.paz]
    (wilt(pod q.paz) now p.paz) 
  ::
  ++  iris                                  ::  top-level namespace
    |=  now=time  ^-  lens
    |%
    ++  hope                                ::  series, deck
      |=  [wid=quid qey=quay]
      ^-  (list cash)
      (mine:daq wid qey)
    ::
    ++  peek                                ::  probe, deck and pod
      |=  hap=path  ^-  (unit)
      =+  roy=(pray hap)
      ?^  roy
        [~ q.u.roy]
      |-  ^-  (unit)
      ?~  pod
        ~
      ?.  =(i.hap p.i.pod)
        $(pod t.pod)
      (peek:q.i.pod ..peek t.hap)
    ::
    ++  pray                                ::  probe, deck
      |=  [hap=path]  ^-  (unit bill)
      =+  nev=(mine:daq [~ ~] [hap |=(* [~ ~])])
      ?~  nev  ~
      ?~  r.i.nev  ~
      [~ q.i.r.i.nev]
    ::
    ++  when  now
    ++  wish                                ::  sequence, deck
      |=  [wid=quid qey=quay]
      ^-  (list case) 
      (plow:daq wid qey)
    --
  ::
  ++  pile                                  ::  add to sequence
    |=  [now=time lap=path val=*]
    ^-  [p=fact q=_..pile]
    =+  yam=(pile:daq now lap val)
    :- [(flop `path`[~(rent co [~ %ud p.yam]) (flop lap)]) [now val]]
    ..pile(daq q.yam)
  ::
  ++  putt                                  ::  write as state
    |=  [now=time lap=path val=*]
    ^-  [p=fact q=_..putt]
    :-  [lap [now val]]
    ..putt(daq (putt:daq now lap val))
  ::
  ++  stow
    |=  [now=time pie=(list ,[p=@ta q=plum])]
    =+  lod=*(list fact)
    |-  ^+  [p=lod q=..stow]
    ?~  pie
      [(flop lod) ..stow]
    ?+    q.i.pie  $(pie t.pie)
        [%pi *]  
      =+  von=(pile now [p.i.pie p.q.i.pie] q.q.i.pie)
      $(pie t.pie, lod [p.von lod], ..stow q.von)
    ::
        [%pu *]
      =+  von=(putt now [p.i.pie p.q.i.pie] q.q.i.pie)
      $(pie t.pie, lod [p.von lod], ..stow q.von)
    ==
  ::
  ++  wick
    |=  :*  now=time
            vey=(list pork) 
            sun=(list ,[p=term q=pork]) 
        ==
    ^-  [p=(list kiwi) q=_..wick]
    %+  work  
      now
    |=  [cam=lens who=@ta ski=ship]
    ^-  [p=(list plum) q=ship]
    =+  ^=  bam
        %+  weld
          vey
        |-  ^-  (list pork)
        ?~(sun ~ =+(yec=$(sun t.sun) ?.(=(who p.i.sun) yec [q.i.sun yec])))
    =+  yap=*(list (list plum))
    |-  ^-  [p=(list plum) q=ship]
    ?~  bam
      =+  pay=`_yap`(flop yap)
      :-  |-  ^-  (list plum)
          ?~  pay
            ~
          (weld i.pay $(pay t.pay))
      ski
    =+  rez=(poke:ski cam i.bam)
    $(bam t.bam, yap [p.rez yap], ski q.rez)
  ::
  ++  wilt
    |=  [now=time pie=(list ,[p=term q=plum])]
    ^-  [p=(list kiwi) q=_..wilt]
    ?:  =(~ pie)
      [~ ..wilt]
    =+  vad=(stow now pie)
    =>  ^+(. .(..work q.vad))
    =-  :-  |-  ^-  (list kiwi)
            ?~  pie
              p.gow
            =+  weg=$(pie t.pie)
            ?.(?=([%yo *] q.i.pie) weg [p.q.i.pie weg])
        q.gow
    ^=  gow
    %^    wick
        (add now (bex 48))
      |-  ^-  (list pork)
      ?~(p.vad ~ [[%nu i.p.vad] $(p.vad t.p.vad)])
    |-  ^-  (list ,[p=term q=pork])
    ?~  pie 
      ~ 
    =+  der=$(pie t.pie)
    ?.(?=([%to *] q.i.pie) der [[p.i.pie [%do p.q.i.pie]] der])
  ::
  ++  work
    |=  :-  now=time 
        ^=  rap  $_  |+  [cam=lens @ta ski=ship]
                     [p=*(list plum) q=*ship]
    ^-  [p=(list kiwi) q=_..work]
    =+  ^=  pan  ^-  (list ,[p=term q=(list plum) r=ship])
        %+  turn
          pod
        |=  a=[p=term q=ship]
        [p.a (rap (iris now) p.a q.a)]
    =>  ^+(. .(pod (turn pan |=(a=[p=term q=(list plum) r=ship] [p.a r.a]))))
    %+  wilt
      now
    |-  ^-  (list ,[p=term q=plum])
    ?~  pan
      ~
    |-  ^-  (list ,[p=term q=plum])
    ?~  q.i.pan
      ^$(pan t.pan)
    [[p.i.pan i.q.i.pan] $(q.i.pan t.q.i.pan)]
  --
.
