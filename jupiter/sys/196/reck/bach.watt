!:
::          %baq, network interpreter.   This file is in the public domain.
::
:-  %baq
^-  dock
|=  [now=time wha=@ta]
%^    hull
    (iris now)
  wha
^-  bead
|=  [now=time wha=@ta]
:-  ^-  lime
    :~  %all
      :^    %rod                                        ::  hear packets
          %abel
        [[~ ~] /hose/pack/ |=(* [~ ~])]
      ^-  hunt
      |=  [seq=@ud muz=* cax=bill]
      ?>  ?=(tube muz)
      [%run %pack cax]
    ::
      :^    %rod                                        ::  hear requests
          %boaz
        [[~ ~] ~ |=(hap=* ?.(?=([@muz %to %bach %re ~] ~ [~ i.hap])))]
      ^-  fish
      |=  [seq=@ud muz=* cax=bill] 
      [%run %want ((hard ,[app=@tas wop=pole]) [muz q.cax])]
    ==
^-  vane
=>  ..$
=<  |%
    ++  peek  |=([cam=lens hap=path] ~)
    ++  poke  
      |=  [cam=lens man=*] 
      ^-  [p=lime q=vane]
      =+  muv=(move man)
      ?.  =(muv man)
        [~ ..poke] 
      =+  guo=(love cam muv)
      [p.guo ..poke(..love q.guo)]
    --
=>  |%
    ++  belt  ,[p=lane q=flow r=(list bird)]            ::  route control 
    ++  bird  ,[p=@da q=rock]                           ::  sent package
    ++  flow  ,[p=@da q=@ud]                            ::  rtt and window
    ++  frog  ,[p=hand q=(map flap bird) q=(list rock)] ::  live message

    ++  bong                                            ::  sending state
      $:  way=lane                                      ::  network route
          rtt=@da                                       ::  roundtrip time
          win=@ud                                       ::  win size, bytes
          masg=
          liv=(list ,[p=@da q=hand r=rock])             ::  packets in flight
          rez=(list rock)                               ::  packets unsent
      ==
    ++  qu   
    

    ++  dode  ,[p=base q=(list path)]                   ::  do dependency
    ++  doin  sock                                      ::  do introduction
    ++  dore  ,[p=sock q=path]                          ::  do request
    ++  dost  ,[p=sock q=bond]                          ::  do statement

    ++  lode                                            ::  live dependency
      $:  app=@ta                                       ::  dependent app
          end=@da                                       ::  sell by
          out=@ud                                       ::  outstanding reqs
          dol=dode                                      ::  do 
      ==

    ++  loin                                            ::  live introduction
      $:  app=@ta                                       ::  dependent app
          end=@da                                       ::  sell by
          dol=doin
      ==

    ++  lost                                            ::  live statement
      $:  man=handle
      ==

    lost
      $:  app
    ++  loin  
      $:
      sock                                      ::  live introduction
    ++  lore                                            ::  live request
    ++  lost



    ++  bird                                            ::  message in flight
      $:  gar=(list rock)                               ::  unacked rocks
          
    ==
    ++  barn                                            ::  statement source
      $:  
    ++  door                                            ::  network operation
      $:  man=hand                                      ::  operator handle
          job=(list path)                               ::  global requests
      ==
    ++  host
      $:  pub=pass                                      ::  public key
          pri=ring                                      ::  private key
          pal=(map base pipe)                           ::  friends
      ==
    ++  pipe                                            ::  foreign connection
      $:  fun=@da                                       ::  fresh until
          key=code                                      ::  key or 0
          new=hand                                      ::  intro handle
          pub=pass                                      ::  public key
          way=lane                                      ::  network route
      ==   
    ++  pole                                            ::  request command
      $:  man=hand                                      ::  opaque handle
          toy=(unit ,[p=@da q=(list path)])             ::  atomic query
      ==
    ++  tear                                            ::  
      
    ++  dude                                            ::  foreign state
      $:  ren=regn                                      ::  regime number
          pub=pass                                      ::  public key
      ==
    ++  home                                            ::  domestic state
      $:  ren=regn                                      ::  regime number
          pri=ring                                      ::  private key
      ==
    
    ++  game                                            ::  application state
      $:  hos=(map base host)                           ::  domestic state
          hop=(list bell)                               ::  meta-operations
          inn=(list deed)                               ::  pending inputs
          out=(list gift)                               ::  pending outputs
          act=(map way belt)                            ::  output routes
      ==
    ++  move                                            ::  event/action
      $:  [%adge p=base q=hand]                         ::  acknowledged
          [%pack p=@da q=rock]                          ::  interpret packet
          [%send p=lane q=rock]                         ::  transmit packet

          [%mail p=hand q=@da r=note]                   ::  transmit statement
          [%pass p=base q=mark r=@da s=pass]            ::  learn public key
          [%road p=base q=@ud s=lane]                   ::  learn route
          [%ring p=base q=@ud r=ring]                   ::  learn private key
          [%link p=base q=base r=@da s=code]            ::  learn symmetric key

          [%quiz 
          [%want p=@tas q=pole]                         ::  dependency
        ==
      ::
          :-  %movb                                     ::  A-layer event
        $%  :-  %hiyb                                   ::  A+ surface
          $%  [%hear p=@da q=rock]                      ::  (in) hear packet
              [%
          ==
        $%  :-  %lowa                                   ::  A-/B+ surface
          $%  [%mail p=hand q=@da q=note]               ::  handle timeout msg
              [%link 
          ==
      ==
              
              
              [%read p=@da q=rock]                      ::

          [%know p=base q=hand]                         ::  ack statement
          [%pack p=@da q=pack]                          ::  learn packet
          [%want p=@tas q=pole]                         ::  learn request
      ==
    --
=+  sys=*game
|%
++  love
  |=  [cam=lens muv=move]

--
