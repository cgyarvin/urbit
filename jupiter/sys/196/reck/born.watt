!:
::          %born, a shell.   This file is in the public domain.
::
:-  %born
^-  dock
|=  [now=time wha=@ta]
%^    hull
    (iris now)
  wha
^-  bead
|=  [now=time wha=@ta]
:-  ^-  lime
    :-  %all
    :~  :^    %rod
            %abel
          :-  [~ ~]
          :-  [%echo %e ~]
          |=  hap=*  ^-  (unit)
          ?.  ?=([p=@ta q=@ta r=@ta ~] hap)
            ~
          :-  ~
          :+  (?(%gold %iron %lead) r.hap)
            (need (clan %ud q.hap))
          ((sane %ta) p.hap)
        ^-  hunt
        |=  [seq=@ud muz=* cax=bill]
        [%run ((hard tube) muz) q.cax]
    ==
^-  vane
=>  ..$
=<  |%
    ++  peek  |=([cam=lens hap=path] ~)
    ++  poke  
      |=  [cam=lens man=*] 
      ^-  [p=lime q=vane]
      =+  muv=((hard move) man)
      =+  guf=abet:(warp:(chez p.muv cam) q.muv)
      :-  :-  %all
          ^-  (list lime)
          %+  turn
            p.guf
          |=  ran=rain
          ?>  ?=([%tell *] ran)
          [%say %yo %p p.muv 0 q.ran]       ::  XX  improve
      +>.$(..chez q.guf)
    --
=>  |%
    ++  desk                                            ::  session state
      $:  air=(list tube)                               ::  active tubes
          nub=vase                                      ::  system + libraries
          red=vase                                      ::  product log
          ser=vase                                      ::  source log
          way=(map ,@ta vase)                           ::  environment 
      ==                                                ::
    ++  dusk                                            ::  default session
      ^-  desk                                          ::  
      :*  air=~                                         ::  not attached
          nub=!>(..zuul)                                ::  default core
          red=[[%cube 0 %atom %n] ~]                    ::  no product history
          ser=[[%cube 0 %atom %n] ~]                    ::  no source history
          way=~                                         ::  no variables
      ==                                                ::
    ++  game                                            ::  active state
      $:  lap=(map tube base)                           ::  tubes identified
          war=(map base desk)                           ::  consoles by user
          sod=(map tube desk)                           ::  anon consoles
          vat=(map base chum)                           ::  passwords
      ==                                                ::
    ++  move  ,[p=tube q=pear]                          ::  application event
    ++  pear                                            ::  events processed
      $%  [%bbye ~]                                     ::  log out
          [%dire p=@tas q=dram]                         ::  loaded directory
          [%file p=@tas q=@]                            ::  loaded atomic file
          [%graf p=(list ,@ta)]                         ::  multiline command 
          [%helo p=@p q=@dr r=chum]                     ::  name age password
          [%line p=@t]                                  ::  command line
          [%word p=chum]                                ::  set password
      ==                                                ::
    ++  rain                                            ::  reactions produced
      $%  [%cart p=(list)]                              ::  error trace
          [%drop p=@]                                   ::  transmit packet
          [%hear p=@]                                   ::  receive packet
          [%load p=@tas q=path]                         ::  request directory
          [%loaf p=@tas q=path]                         ::  request atomic file
          [%pour p=path q=dram]                         ::  write directory
          [%save p=path q=@]                            ::  write atomic file
          [%tell p=?(0 1 2 3) q=tank]                   ::  report to human
      == 
    --
=+  sys=*game
|%
++  chez
  |=  [dub=tube cam=lens]
  =+  who=(~(get by lap.sys) dub)
  =+  ^=  tuy  ^-  desk
      ?~  who  
        =+  dez=(~(get by sod.sys) dub)
        ?~(dez dusk u.dez)
      (need (~(get by war.sys) u.who))
  =+  por=*(list rain)
  |%
  ++  abet  
    ^-  [p=(list rain) q=_..chez]
    :-  (flop por)
    ?~  who
      ..chez(sod.sys (~(put by sod.sys) dub tuy))
    ..chez(war.sys (~(put by war.sys) u.who tuy))
  ::
  ++  chow
    |=  [pez=(unit ,@ta) vax=vase]
    ^+  +>
    ?+    pez  !!
        ~
      =+  ham=~(dole ut p.vax)
      %_  +>.$
        por  :+  [%tell %1 (dish:ut ham q.vax)]
               [%tell %0 (dial:ut ham)]
             por
        tuy  tuy(red (slop vax red.tuy))
      ==
    ::
        [~ %load]
      =+  hup=((soft path) q.vax)
      %-  chug
      ?.  &(?=([%face *] p.vax) ?=(^ hup))
        [%tell %3 [%leaf "<usage: name=path>"]]
      [%load p.p.vax u.hup]
    ::
        [~ %loaf]
      =+  hup=((soft path) q.vax)
      %-  chug
      ?.  &(?=([%face *] p.vax) ?=(^ hup))
        [%tell %3 [%leaf "<usage: name=path>"]]
      [%loaf p.p.vax u.hup]
    ::
        [~ %pour]
      =+  yef=((soft ,[p=path q=dram]) [q:(slot 2 vax) q:(slot 3 vax)])
      %-  chug
      ?~(yef [%tell %3 [%leaf "<usage: [path dram]>"]] [%pour u.yef])
    ::
        [~ %save]
      =+  yef=((soft ,[p=path q=@]) [q:(slot 2 vax) q:(slot 3 vax)])
      %-  chug
      ?~(yef [%tell %3 [%leaf "<usage: [path @]>"]] [%save u.yef])
    ::
        [~ %type]  
      (chug [%tell %0 (dial:ut ~(dole ut p.vax))])
    ==
  ::
  ++  chub
    |=  [pez=(unit ,@ta) ten=tune]
    ^+  +>
    ?-    ten
        [0 *]  (chow pez p.ten)
        [1 *]  %_    +>
                   por
                 |-  ^-  (list rain)
                 ?~  p.ten
                   por
                 =+  vad=(dish:ut [[~ %path] (path i.p.ten)])
                 %=  $
                   p.ten  t.p.ten
                   por    [[%tell %3 [%leaf "<need {~(ram re vad)}>"]] por]
                 ==
               ==
        [2 *]  (chug [%cart p.ten])
    ==
  ::
  ++  chug  |=(ran=rain %_(+> por [ran por]))
  ++  line                                    ::  execute a line
    |=  txt=@t
    ^+  +>
    =+  ^=  fob  ^-  [p=(unit term) q=gene]
        %+  rash
          txt
        ;~  pose 
          (stag ~ (stag %cltr (most ace wide:vast)))
          ;~  plug
            (stag ~ ;~(pfix col sym))
            ;~(pfix ace (stag %cltr (most ace wide:vast)))
          ==
        ==
    %+  chub
      p.fob
    (slab =(%type p.fob) [(lube when:cam) q.fob] (lick cam))
  ::
  ++  lick                                    ::  synthetic namespace
    |=  cam=lens
    |=  nam=*
    ^-  (unit)
    =+  pax=(path nam)
    =+  voy=(peek:cam [%cary pax])
    voy
  ::
  ++  lube                                    ::  construct context
    |=  now=@da  ^-  vase
    =+  yad=~(rent co [~ %da now])
    ::  ~&  [%what `@ud`now yad]
    %+  slop
      [[%atom %ta] ~(rent co [~ %da now])]
    %+  slop
      %+  slop
        [[%face %$ p.ser.tuy] q.ser.tuy]
      [[%face %$ p.red.tuy] q.red.tuy]
    (slum nub.tuy way.tuy)
  ::
  ++  warp
    |=  per=pear
    ^+  +>
    ?+    per  !!
        [%line *]
      (line p.per)
    ==
  --
--
